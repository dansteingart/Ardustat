// Generated by CoffeeScript 1.6.2
var AttributePool, Changeset, etherpad;

if (typeof WEB !== "undefined" && WEB !== null) {
  if ((window.ShareJS != null) && (window.ShareJS.Changeset != null)) {
    Changeset = window.ShareJS.Changeset;
    AttributePool = window.ShareJS.AttributePool;
  }
} else {
  Changeset = require("./../lib-etherpad/Changeset");
  AttributePool = require("./../lib-etherpad/AttributePool");
}

etherpad = {
  Changeset: Changeset,
  AttributePool: AttributePool
};

etherpad.name = "etherpad";

etherpad.create = function() {
  if (Changeset == null) {
    console.log("ERROR: Etherpad library not found. Make sure to include Attributepool.js and Changeset.js in your javascript sourcecode");
  }
  return {
    "text": "",
    "attribs": Changeset.makeAttribution(""),
    "pool": new AttributePool()
  };
};

etherpad.tryDeserializeSnapshot = function(snapshot) {
  if (snapshot.pool.clone) {
    return snapshot;
  }
  snapshot.pool = new AttributePool().fromJsonable(snapshot.pool);
  return snapshot;
};

etherpad.tryDeserializeOp = function(op) {
  if (op.pool.clone) {
    return op;
  }
  if (op.pool.numToAttrib) {
    op.pool = new AttributePool().fromJsonable(op.pool);
  } else {
    op.pool = new AttributePool().fromJsonable(JSON.parse(op.pool));
  }
  return op;
};

etherpad.apply = function(snapshot, op) {
  var newCS, result;

  snapshot = etherpad.tryDeserializeSnapshot(snapshot);
  op = etherpad.tryDeserializeOp(op);
  result = {};
  result.pool = snapshot.pool.clone();
  newCS = Changeset.moveOpsToNewPool(op.changeset, op.pool, result.pool);
  result.text = Changeset.applyToText(newCS, snapshot.text);
  result.attribs = Changeset.applyToAttribution(newCS, snapshot.attribs, result.pool);
  return result;
};

etherpad.transform = function(op1, op2, side) {
  var newPool, op2cs, result;

  op1 = etherpad.tryDeserializeOp(op1);
  op2 = etherpad.tryDeserializeOp(op2);
  result = {};
  newPool = op1.pool.clone();
  op2cs = Changeset.moveOpsToNewPool(op2.changeset, op2.pool, newPool);
  result.changeset = Changeset.follow(op1.changeset, op2cs, side === "right", newPool);
  result.pool = newPool;
  return result;
};

etherpad.compose = function(op1, op2) {
  var newPool, op2cs, result;

  op1 = etherpad.tryDeserializeOp(op1);
  op2 = etherpad.tryDeserializeOp(op2);
  result = {};
  newPool = op1.pool.clone();
  op2cs = Changeset.moveOpsToNewPool(op2.changeset, op2.pool, newPool);
  result.changeset = Changeset.compose(op1.changeset, op2cs, newPool);
  result.pool = newPool;
  return result;
};

etherpad.serialize = function(snapshot) {
  var attribs, pool, text;

  text = snapshot.text;
  attribs = snapshot.attribs;
  return pool = snapshot.pool.toJsonable();
};

etherpad.serializeOp = function(snapshot) {
  var changeset, pool;

  changeset = snapshot.changeset;
  return pool = JSON.stringify(snapshot.pool);
};

etherpad.deserialize = function(obj) {
  var attribs, pool, text;

  text = obj.text;
  attribs = obj.attribs;
  return pool = new AttributePool().fromJsonable(obj.pool);
};

if (typeof WEB !== "undefined" && WEB !== null) {
  exports.types || (exports.types = {});
  exports.types.etherpad = etherpad;
} else {
  module.exports = etherpad;
}
