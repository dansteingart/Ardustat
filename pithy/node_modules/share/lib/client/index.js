// Generated by CoffeeScript 1.6.2
var Connection, hasBCSocket, hasSockJS, socketImpl;

if (typeof WEB !== "undefined" && WEB !== null) {
  hasBCSocket = window.BCSocket !== void 0;
  hasSockJS = window.SockJS !== void 0;
  if (hasBCSocket) {
    socketImpl = 'channel';
  } else {
    if (hasSockJS) {
      socketImpl = 'sockjs';
    } else {
      socketImpl = 'websocket';
    }
  }
} else {
  Connection = require('./connection').Connection;
}

exports.open = (function() {
  var connections, getConnection, maybeClose;

  connections = {};
  getConnection = function(origin, authentication) {
    var c, del, location, protocol;

    if ((typeof WEB !== "undefined" && WEB !== null) && (origin == null)) {
      location = window.location;
      protocol = socketImpl === 'websocket' ? 'ws:' : location.protocol;
      origin = "" + protocol + "//" + location.host + "/" + socketImpl;
    }
    if (!connections[origin]) {
      c = new Connection(origin, authentication);
      del = function() {
        return delete connections[origin];
      };
      c.on('disconnected', del);
      c.on('connect failed', del);
      connections[origin] = c;
    }
    return connections[origin];
  };
  maybeClose = function(c) {
    var doc, name, numDocs, _ref;

    numDocs = 0;
    _ref = c.docs;
    for (name in _ref) {
      doc = _ref[name];
      if (doc.state !== 'closed' || doc.autoOpen) {
        numDocs++;
      }
    }
    if (numDocs === 0) {
      return c.disconnect();
    }
  };
  return function(docName, type, options, callback) {
    var authentication, c, origin;

    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (typeof options === 'string') {
      options = {
        'origin': options
      };
    }
    origin = options.origin;
    authentication = options.authentication;
    c = getConnection(origin, authentication);
    c.open(docName, type, function(error, doc) {
      if (error) {
        callback(error);
        return maybeClose(c);
      } else {
        doc.on('closed', function() {
          return maybeClose(c);
        });
        return callback(null, doc);
      }
    });
    c.on('connect failed');
    return c;
  };
})();

if (typeof WEB === "undefined" || WEB === null) {
  exports.Doc = require('./doc').Doc;
  exports.Connection = require('./connection').Connection;
}
