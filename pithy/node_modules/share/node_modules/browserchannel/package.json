{
  "author": {
    "name": "Joseph Gentle",
    "email": "josephg@gmail.com",
    "url": "http://josephg.com/"
  },
  "name": "browserchannel",
  "description": "Google BrowserChannel server for NodeJS",
  "version": "1.0.4",
  "homepage": "https://github.com/josephg/node-browserchannel",
  "repository": {
    "type": "git",
    "url": "git://github.com/josephg/node-browserchannel.git"
  },
  "main": "index.js",
  "engine": "node >= 0.6.2",
  "scripts": {
    "test": "mocha",
    "prepublish": "make"
  },
  "dependencies": {
    "hat": "*",
    "connect": "~2",
    "request": "~2"
  },
  "devDependencies": {
    "coffee-script": "~1",
    "timerstub": "*",
    "mocha": "*"
  },
  "readme": "A [BrowserChannel](http://closure-library.googlecode.com/svn/trunk/closure/goog/net/browserchannel.js) server.\n\n**tldr;** Its like socket.io, but it scales better and it has fewer bugs. It\njust does long polling. It also doesn't support websockets and doesn't support\ncross-domain requests out of the box.\n\nBrowserChannel is google's version of [socket.io](http://socket.io) from when they first put\nchat in gmail. Unlike socket.io, browserchannel guarantees:\n\n- Messages will arrive in order\n- Messages will never arrive on the server after a connection has closed\n- The mail will always get through on any browser that google talk works on, which is all of them.\n\n[![Build Status](https://secure.travis-ci.org/josephg/node-browserchannel.png)](http://travis-ci.org/josephg/node-browserchannel)\n\nnode-browserchannel:\n\n- Is compatible with the closure library's browserchannel implementation\n- Is super thoroughly tested\n- Works in IE5.5+, iOS, Safari, Chrome, Firefox, and probably others.\n- Works in any network environment (incl. behind buffering proxies)\n\n---\n\n# Use it\n\n    # npm install browserchannel\n\nBrowserchannel is implemented as connect middleware. Here's an echo server:\n\n```javascript\nvar browserChannel = require('browserchannel').server;\nvar connect = require('connect');\n\nvar server = connect(\n  connect.static(\"#{__dirname}/public\"),\n  browserChannel(function(session) {\n    console.log('New session: ' + session.id +\n      ' from ' + session.address +\n      ' with cookies ' + session.headers.cookie);\n\n    session.on('message', function(data) {\n      console.log(session.id + ' sent ' + JSON.stringify(data));\n      session.send(data);\n    });\n\n    session.on('close', function(reason) {\n      console.log(session.id + ' disconnected (' + reason + ')');\n    });\n      \n    // This tells the session to stop trying to connect\n    //session.stop();\n    \n    // This just kills the session.\n    //session.close();\n  })\n);\n\nserver.listen(4444);\n\nconsole.log('Echo server listening on localhost:4444');\n```\n\nThe client emulates the [websocket API](http://dev.w3.org/html5/websockets/). Here is a simple client:\n\n```javascript\nvar BCSocket = require('browserchannel').BCSocket;\n\nvar socket = new BCSocket('http://localhost:4321/channel');\nsocket.onopen = function() {\n  socket.send({hi:'there'});\n};\nsocket.onmessage = function(message) {\n  console.log('got message', message);\n};\n\n// later...\nsocket.close()\n```\n\n... Or from a website:\n\n```html\n<html><head>\n<script src='/channel/bcsocket.js'></script>\n<script>\nsocket = new BCSocket('/channel');\nsocket.onopen = function() {\n  socket.send({hi:'there'});\n  socket.close();\n};\nsocket.onmessage = function(message) {\n  // ...\n};\n</script>\n```\n\nYou can also ask the client to automatically reconnect whenever its been disconnected. - Which is\nsuper useful.\n\n```javascript\nvar BCSocket = require('browserchannel').BCSocket;\nsocket = new BCSocket('http://localhost:4321/channel', reconnect:true);\nsocket.onopen = function() {\n  socket.send(\"I just connected!\");\n};\n```\n\n---\n\n# Differences from Websocket\n\n- You can send messages before the client has connected. This is recommended,\n  as any messages sent synchronously with the connection's creation will be\n  sent during the initial request. This removes an extra round-trip.\n- The send method can pass a callback which will be called when the message has\n  been received. **NOTE**: If the client closes, it is not guaranteed that this\n  method will ever be called.\n- Send uses google's JSON encoder. Its almost the same as the browser one, but\n  `{x:undefined}` turns in to `{x:null}` not `{}`.\n\n# API\n\nFor the most part, the API is identical to websockets.\n\n```javascript\nnew BCSocket(hostname, opts)\n```\n\nopts is optional, and if it exists it should be an object which can contain the\nfollowing properties:\n\n- **appVersion**: Your application's protocol version. This is passed to the server-side\n  browserchannel code, in through your session handler as `session.appVersion`\n- **prev**: The previous BCSocket object, if one exists. When the socket is established,\n  the previous bcsocket session will be disconnected as we reconnect.\n- **reconnect**: Tell the socket to automatically reconnect when its been disconnected.\n- **failFast**: Make the socket report errors immediately, rather than trying a few times\n  first.\n- **crossDomainXhr**: Set to true to enable the cross-origin credential\n  flags in XHR requests. The server must send the\n  Access-Control-Allow-Credentials header and can't use wildcard access\n  control hostnames. See:\n    http://www.html5rocks.com/en/tutorials/cors/#toc-withcredentials\n\n\n---\n\n# Caveats\n\n- It doesn't do RPC.\n- Currently there's no websocket support. So, its higher bandwidth on modern browsers.\n\n---\n\n# How to rebuild the client\n\nThe client uses google's [closure library](https://developers.google.com/closure/library/)\n& [compiler](https://developers.google.com/closure/compiler/). There's a couple small bugs that google\nstill hasn't fixed in their library (and probably never will), so I have a patch file kicking around.\n\nRebuilding the client library is annoying, so I keep an up to date compiled copy in `dist/`.\n\n1. Download the closure library\n\n```\nsvn checkout http://closure-library.googlecode.com/svn/trunk/ closure-library\ncd closure-library\n```\n\n2. Download the closure compiler\n\n```\ncurl http://closure-compiler.googlecode.com/files/compiler-latest.zip > compiler-latest.zip\nunzip compiler-latest.zip compiler.jar\n```\n\n3. Patch the library\n\n```\npatch -p0 <../node-browserchannel/closure-*.patch\n```\n\n4. Build\n\n```\ncd ../node-browserchannel\nmake\n```\n\n\n---\n\n### License\n\nLicensed under the standard MIT license:\n\nCopyright 2011 Joseph Gentle.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "browserchannel@1.0.4",
  "dist": {
    "shasum": "ac689967039d1508383b84fc87c623bb057d2609"
  },
  "_from": "browserchannel@~1",
  "_resolved": "https://registry.npmjs.org/browserchannel/-/browserchannel-1.0.4.tgz"
}
