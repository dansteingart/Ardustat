{
  "name": "raw-body",
  "description": "Get and validate the raw body of a readable stream.",
  "version": "1.3.1",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Raynos",
      "email": "raynos2@gmail.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/stream-utils/raw-body"
  },
  "dependencies": {
    "bytes": "1",
    "iconv-lite": "0.4.5"
  },
  "devDependencies": {
    "istanbul": "0.3.2",
    "mocha": "~2.0.1",
    "readable-stream": "~1.0.33",
    "through2": "0.6.3"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec test/"
  },
  "readme": "# raw-body\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\nGets the entire buffer of a stream either as a `Buffer` or a string.\nValidates the stream's length against an expected length and maximum limit.\nIdeal for parsing request bodies.\n\n## API\n\n```js\nvar getRawBody = require('raw-body')\nvar typer      = require('media-typer')\n\napp.use(function (req, res, next) {\n  getRawBody(req, {\n    length: req.headers['content-length'],\n    limit: '1mb',\n    encoding: typer.parse(req.headers['content-type']).parameters.charset\n  }, function (err, string) {\n    if (err)\n      return next(err)\n\n    req.text = string\n    next()\n  })\n})\n```\n\nor in a Koa generator:\n\n```js\napp.use(function* (next) {\n  var string = yield getRawBody(this.req, {\n    length: this.length,\n    limit: '1mb',\n    encoding: this.charset\n  })\n})\n```\n\n### getRawBody(stream, [options], [callback])\n\nReturns a thunk for yielding with generators.\n\nOptions:\n\n- `length` - The length length of the stream.\n  If the contents of the stream do not add up to this length,\n  an `400` error code is returned.\n- `limit` - The byte limit of the body.\n  If the body ends up being larger than this limit,\n  a `413` error code is returned.\n- `encoding` - The requested encoding.\n  By default, a `Buffer` instance will be returned.\n  Most likely, you want `utf8`.\n  You can use any type of encoding supported by [iconv-lite](https://www.npmjs.org/package/iconv-lite#readme).\n\nYou can also pass a string in place of options to just specify the encoding.\n\n`callback(err, res)`:\n\n- `err` - the following attributes will be defined if applicable:\n\n    - `limit` - the limit in bytes\n    - `length` and `expected` - the expected length of the stream\n    - `received` - the received bytes\n    - `encoding` - the invalid encoding\n    - `status` and `statusCode` - the corresponding status code for the error\n    - `type` - either `entity.too.large`, `request.size.invalid`, `stream.encoding.set`, or `encoding.unsupported`\n\n- `res` - the result, either as a `String` if an encoding was set or a `Buffer` otherwise.\n\nIf an error occurs, the stream will be paused, everything unpiped,\nand you are responsible for correctly disposing the stream.\nFor HTTP requests, no handling is required if you send a response.\nFor streams that use file descriptors, you should `stream.destroy()` or `stream.close()` to prevent leaks.\n\n[npm-image]: https://img.shields.io/npm/v/raw-body.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/raw-body\n[travis-image]: https://img.shields.io/travis/stream-utils/raw-body.svg?style=flat-square\n[travis-url]: https://travis-ci.org/stream-utils/raw-body\n[coveralls-image]: https://img.shields.io/coveralls/stream-utils/raw-body.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/stream-utils/raw-body\n[david-image]: http://img.shields.io/david/stream-utils/raw-body.svg?style=flat-square\n[david-url]: https://david-dm.org/stream-utils/raw-body\n[license-image]: http://img.shields.io/npm/l/raw-body.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/raw-body.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/raw-body\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/stream-utils/raw-body/issues"
  },
  "_id": "raw-body@1.3.1",
  "dist": {
    "shasum": "58de019bf61d53304e9ab8bfa7ebece9dce5c66a"
  },
  "_from": "raw-body@1.3.1",
  "_resolved": "https://registry.npmjs.org/raw-body/-/raw-body-1.3.1.tgz"
}
