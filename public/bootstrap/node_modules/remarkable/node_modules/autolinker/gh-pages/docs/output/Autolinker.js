Ext.data.JsonP.Autolinker({"tagname":"class","name":"Autolinker","autodetected":{},"files":[{"filename":"Autolinker.js","href":"Autolinker.html#Autolinker"}],"extends":null,"members":[{"name":"className","tagname":"cfg","owner":"Autolinker","id":"cfg-className","meta":{}},{"name":"email","tagname":"cfg","owner":"Autolinker","id":"cfg-email","meta":{}},{"name":"newWindow","tagname":"cfg","owner":"Autolinker","id":"cfg-newWindow","meta":{}},{"name":"replaceFn","tagname":"cfg","owner":"Autolinker","id":"cfg-replaceFn","meta":{}},{"name":"stripPrefix","tagname":"cfg","owner":"Autolinker","id":"cfg-stripPrefix","meta":{}},{"name":"truncate","tagname":"cfg","owner":"Autolinker","id":"cfg-truncate","meta":{}},{"name":"twitter","tagname":"cfg","owner":"Autolinker","id":"cfg-twitter","meta":{}},{"name":"urls","tagname":"cfg","owner":"Autolinker","id":"cfg-urls","meta":{}},{"name":"charBeforeProtocolRelMatchRegex","tagname":"property","owner":"Autolinker","id":"property-charBeforeProtocolRelMatchRegex","meta":{"private":true}},{"name":"htmlCharacterEntitiesRegex","tagname":"property","owner":"Autolinker","id":"property-htmlCharacterEntitiesRegex","meta":{"private":true}},{"name":"htmlParser","tagname":"property","owner":"Autolinker","id":"property-htmlParser","meta":{"private":true}},{"name":"matchValidator","tagname":"property","owner":"Autolinker","id":"property-matchValidator","meta":{"private":true}},{"name":"matcherRegex","tagname":"property","owner":"Autolinker","id":"property-matcherRegex","meta":{"private":true}},{"name":"tagBuilder","tagname":"property","owner":"Autolinker","id":"property-tagBuilder","meta":{"private":true}},{"name":"constructor","tagname":"method","owner":"Autolinker","id":"method-constructor","meta":{}},{"name":"createMatchReturnVal","tagname":"method","owner":"Autolinker","id":"method-createMatchReturnVal","meta":{"private":true}},{"name":"getHtmlParser","tagname":"method","owner":"Autolinker","id":"method-getHtmlParser","meta":{"protected":true}},{"name":"getTagBuilder","tagname":"method","owner":"Autolinker","id":"method-getTagBuilder","meta":{}},{"name":"link","tagname":"method","owner":"Autolinker","id":"method-link","meta":{}},{"name":"matchHasUnbalancedClosingParen","tagname":"method","owner":"Autolinker","id":"method-matchHasUnbalancedClosingParen","meta":{"private":true}},{"name":"processCandidateMatch","tagname":"method","owner":"Autolinker","id":"method-processCandidateMatch","meta":{"private":true}},{"name":"processTextNode","tagname":"method","owner":"Autolinker","id":"method-processTextNode","meta":{"private":true}},{"name":"link","tagname":"method","owner":"Autolinker","id":"static-method-link","meta":{"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-Autolinker","short_doc":"Utility class used to process a given string of text, and wrap the URLs, email addresses, and Twitter handles in\nthe ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Autolinker.html#Autolinker' target='_blank'>Autolinker.js</a></div></pre><div class='doc-contents'><p>Utility class used to process a given string of text, and wrap the URLs, email addresses, and Twitter handles in\nthe appropriate anchor (&lt;a&gt;) tags to turn them into links.</p>\n\n<p>Any of the configuration options may be provided in an Object (map) provided to the Autolinker constructor, which\nwill configure how the <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">link()</a> method will process the links.</p>\n\n<p>For example:</p>\n\n<pre><code>var autolinker = new Autolinker( {\n    newWindow : false,\n    truncate  : 30\n} );\n\nvar html = autolinker.link( \"Joe went to www.yahoo.com\" );\n// produces: 'Joe went to &lt;a href=\"http://www.yahoo.com\"&gt;yahoo.com&lt;/a&gt;'\n</code></pre>\n\n<p>The <a href=\"#!/api/Autolinker-static-method-link\" rel=\"Autolinker-static-method-link\" class=\"docClass\">static link()</a> method may also be used to inline options into a single call, which may\nbe more convenient for one-off uses. For example:</p>\n\n<pre><code>var html = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( \"Joe went to www.yahoo.com\", {\n    newWindow : false,\n    truncate  : 30\n} );\n// produces: 'Joe went to &lt;a href=\"http://www.yahoo.com\"&gt;yahoo.com&lt;/a&gt;'\n</code></pre>\n\n<h2>Custom Replacements of Links</h2>\n\n<p>If the configuration options do not provide enough flexibility, a <a href=\"#!/api/Autolinker-cfg-replaceFn\" rel=\"Autolinker-cfg-replaceFn\" class=\"docClass\">replaceFn</a> may be provided to fully customize\nthe output of Autolinker. This function is called once for each URL/Email/Twitter handle match that is encountered.</p>\n\n<p>For example:</p>\n\n<pre><code>var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n\nvar linkedText = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( input, {\n    replaceFn : function( autolinker, match ) {\n        console.log( \"href = \", match.getAnchorHref() );\n        console.log( \"text = \", match.getAnchorText() );\n\n        switch( match.getType() ) {\n            case 'url' : \n                console.log( \"url: \", match.getUrl() );\n\n                if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n                    var tag = autolinker.getTagBuilder().build( match );  // returns an `<a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">Autolinker.HtmlTag</a>` instance, which provides mutator methods for easy changes\n                    tag.setAttr( 'rel', 'nofollow' );\n                    tag.addClass( 'external-link' );\n\n                    return tag;\n\n                } else {\n                    return true;  // let Autolinker perform its normal anchor tag replacement\n                }\n\n            case 'email' :\n                var email = match.getEmail();\n                console.log( \"email: \", email );\n\n                if( email === \"my@own.address\" ) {\n                    return false;  // don't auto-link this particular email address; leave as-is\n                } else {\n                    return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n                }\n\n            case 'twitter' :\n                var twitterHandle = match.getTwitterHandle();\n                console.log( twitterHandle );\n\n                return '&lt;a href=\"http://newplace.to.link.twitter.handles.to/\"&gt;' + twitterHandle + '&lt;/a&gt;';\n        }\n    }\n} );\n</code></pre>\n\n<p>The function may return the following values:</p>\n\n<ul>\n<li><code>true</code> (Boolean): Allow Autolinker to replace the match as it normally would.</li>\n<li><code>false</code> (Boolean): Do not replace the current match at all - leave as-is.</li>\n<li>Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for\nthe match.</li>\n<li>An <a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">Autolinker.HtmlTag</a> instance, which can be used to build/modify an HTML tag before writing out its HTML text.</li>\n</ul>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-className' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-className' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-className' class='name expandable'>className</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A CSS class name to add to the generated links. ...</div><div class='long'><p>A CSS class name to add to the generated links. This class will be added to all links, as well as this class\nplus url/email/twitter suffixes for styling url/email/twitter links differently.</p>\n\n<p>For example, if this config is provided as \"myLink\", then:</p>\n\n<ul>\n<li>URL links will have the CSS classes: \"myLink myLink-url\"</li>\n<li>Email links will have the CSS classes: \"myLink myLink-email\", and</li>\n<li>Twitter links will have the CSS classes: \"myLink myLink-twitter\"</li>\n</ul>\n\n<p>Defaults to: <code>&quot;&quot;</code></p></div></div></div><div id='cfg-email' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-email' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-email' class='name expandable'>email</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>true if email addresses should be automatically linked, false if they should not be. ...</div><div class='long'><p><code>true</code> if email addresses should be automatically linked, <code>false</code> if they should not be.</p>\n<p>Defaults to: <code>true</code></p></div></div></div><div id='cfg-newWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-newWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-newWindow' class='name expandable'>newWindow</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>true if the links should open in a new window, false otherwise. ...</div><div class='long'><p><code>true</code> if the links should open in a new window, <code>false</code> otherwise.</p>\n<p>Defaults to: <code>true</code></p></div></div></div><div id='cfg-replaceFn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-replaceFn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-replaceFn' class='name expandable'>replaceFn</a> : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>A function to individually process each URL/Email/Twitter match found in the input string. ...</div><div class='long'><p>A function to individually process each URL/Email/Twitter match found in the input string.</p>\n\n<p>See the class's description for usage.</p>\n\n<p>This function is called with the following parameters:</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>autolinker</span> : <a href=\"#!/api/Autolinker\" rel=\"Autolinker\" class=\"docClass\">Autolinker</a><div class='sub-desc'><p>The Autolinker instance, which may be used to retrieve child objects from (such\n  as the instance's <a href=\"#!/api/Autolinker-method-getTagBuilder\" rel=\"Autolinker-method-getTagBuilder\" class=\"docClass\">tag builder</a>).</p>\n</div></li><li><span class='pre'>match</span> : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a><div class='sub-desc'><p>The Match instance which can be used to retrieve information about the\n  <a href=\"#!/api/Autolinker.match.Url\" rel=\"Autolinker.match.Url\" class=\"docClass\">URL</a>/<a href=\"#!/api/Autolinker.match.Email\" rel=\"Autolinker.match.Email\" class=\"docClass\">email</a>/<a href=\"#!/api/Autolinker.match.Twitter\" rel=\"Autolinker.match.Twitter\" class=\"docClass\">Twitter</a>\n  match that the <code>replaceFn</code> is currently processing.</p>\n</div></li></ul></div></div></div><div id='cfg-stripPrefix' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-stripPrefix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-stripPrefix' class='name expandable'>stripPrefix</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>true if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text,\nfalse oth...</div><div class='long'><p><code>true</code> if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text,\n<code>false</code> otherwise.</p>\n<p>Defaults to: <code>true</code></p></div></div></div><div id='cfg-truncate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-truncate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-truncate' class='name expandable'>truncate</a> : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of\na link. ...</div><div class='long'><p>A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of\na link. If the URL/email/twitter is over this number of characters, it will be truncated to this length by\nadding a two period ellipsis ('..') to the end of the string.</p>\n\n<p>For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look\nsomething like this: 'yahoo.com/some/long/pat..'</p>\n</div></div></div><div id='cfg-twitter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-twitter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-twitter' class='name expandable'>twitter</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>true if Twitter handles (\"@example\") should be automatically linked, false if they should not be. ...</div><div class='long'><p><code>true</code> if Twitter handles (\"@example\") should be automatically linked, <code>false</code> if they should not be.</p>\n<p>Defaults to: <code>true</code></p></div></div></div><div id='cfg-urls' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-cfg-urls' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-cfg-urls' class='name expandable'>urls</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>true if miscellaneous URLs should be automatically linked, false if they should not be. ...</div><div class='long'><p><code>true</code> if miscellaneous URLs should be automatically linked, <code>false</code> if they should not be.</p>\n<p>Defaults to: <code>true</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-charBeforeProtocolRelMatchRegex' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-property-charBeforeProtocolRelMatchRegex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-property-charBeforeProtocolRelMatchRegex' class='name expandable'>charBeforeProtocolRelMatchRegex</a> : RegExp<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>The regular expression used to retrieve the character before a protocol-relative URL match. ...</div><div class='long'><p>The regular expression used to retrieve the character before a protocol-relative URL match.</p>\n\n<p>This is used in conjunction with the <a href=\"#!/api/Autolinker-property-matcherRegex\" rel=\"Autolinker-property-matcherRegex\" class=\"docClass\">matcherRegex</a>, which needs to grab the character before a protocol-relative\n'//' due to the lack of a negative look-behind in JavaScript regular expressions. The character before the match is stripped\nfrom the URL.</p>\n<p>Defaults to: <code>/^(.)?\\/\\//</code></p></div></div></div><div id='property-htmlCharacterEntitiesRegex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-property-htmlCharacterEntitiesRegex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-property-htmlCharacterEntitiesRegex' class='name expandable'>htmlCharacterEntitiesRegex</a> : RegExp<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>The regular expression that matches common HTML character entities. ...</div><div class='long'><p>The regular expression that matches common HTML character entities.</p>\n\n<p>Ignoring &amp; as it could be part of a query string -- handling it separately.</p>\n<p>Defaults to: <code>/(&amp;nbsp;|&amp;#160;|&amp;lt;|&amp;#60;|&amp;gt;|&amp;#62;)/gi</code></p></div></div></div><div id='property-htmlParser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-property-htmlParser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-property-htmlParser' class='name expandable'>htmlParser</a> : <a href=\"#!/api/Autolinker.HtmlParser\" rel=\"Autolinker.HtmlParser\" class=\"docClass\">Autolinker.HtmlParser</a><span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. ...</div><div class='long'><p>The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. This is lazily instantiated\nin the <a href=\"#!/api/Autolinker-method-getHtmlParser\" rel=\"Autolinker-method-getHtmlParser\" class=\"docClass\">getHtmlParser</a> method.</p>\n</div></div></div><div id='property-matchValidator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-property-matchValidator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-property-matchValidator' class='name expandable'>matchValidator</a> : <a href=\"#!/api/Autolinker.MatchValidator\" rel=\"Autolinker.MatchValidator\" class=\"docClass\">Autolinker.MatchValidator</a><span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>The MatchValidator object, used to filter out any false positives from the matcherRegex. ...</div><div class='long'><p>The MatchValidator object, used to filter out any false positives from the <a href=\"#!/api/Autolinker-property-matcherRegex\" rel=\"Autolinker-property-matcherRegex\" class=\"docClass\">matcherRegex</a>. See\n<a href=\"#!/api/Autolinker.MatchValidator\" rel=\"Autolinker.MatchValidator\" class=\"docClass\">Autolinker.MatchValidator</a> for details.</p>\n</div></div></div><div id='property-matcherRegex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-property-matcherRegex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-property-matcherRegex' class='name expandable'>matcherRegex</a> : RegExp<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>The regular expression that matches URLs, email addresses, and Twitter handles. ...</div><div class='long'><p>The regular expression that matches URLs, email addresses, and Twitter handles.</p>\n\n<p>This regular expression has the following capturing groups:</p>\n\n<ol>\n<li>Group that is used to determine if there is a Twitter handle match (i.e. \\@someTwitterUser). Simply check for its\nexistence to determine if there is a Twitter handle match. The next couple of capturing groups give information\nabout the Twitter handle match.</li>\n<li>The whitespace character before the \\@sign in a Twitter handle. This is needed because there are no lookbehinds in\nJS regular expressions, and can be used to reconstruct the original string in a replace().</li>\n<li>The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.</li>\n<li>Group that matches an email address. Used to determine if the match is an email address, as well as holding the full\naddress. Ex: 'me@my.com'</li>\n<li>Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.\nThis also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&amp;q2=2#myAnchor</li>\n<li>Group that matches a protocol URL (i.e. 'http://google.com'). This is used to match protocol URLs with just a single\nword, like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.</li>\n<li>A protocol-relative ('//') match for the case of a 'www.' prefixed URL. Will be an empty string if it is not a\nprotocol-relative match. We need to know the character before the '//' in order to determine if it is a valid match\nor the // was in a string we don't want to auto-link.</li>\n<li>A protocol-relative ('//') match for the case of a known TLD prefixed URL. Will be an empty string if it is not a\nprotocol-relative match. See #6 for more info.</li>\n</ol>\n\n</div></div></div><div id='property-tagBuilder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-property-tagBuilder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-property-tagBuilder' class='name expandable'>tagBuilder</a> : <a href=\"#!/api/Autolinker.AnchorTagBuilder\" rel=\"Autolinker.AnchorTagBuilder\" class=\"docClass\">Autolinker.AnchorTagBuilder</a><span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>The AnchorTagBuilder instance used to build the URL/email/Twitter replacement anchor tags. ...</div><div class='long'><p>The AnchorTagBuilder instance used to build the URL/email/Twitter replacement anchor tags. This is lazily instantiated\nin the <a href=\"#!/api/Autolinker-method-getTagBuilder\" rel=\"Autolinker-method-getTagBuilder\" class=\"docClass\">getTagBuilder</a> method.</p>\n</div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Autolinker-method-constructor' class='name expandable'>Autolinker</a>( <span class='pre'>[config]</span> ) : <a href=\"#!/api/Autolinker\" rel=\"Autolinker\" class=\"docClass\">Autolinker</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object (optional)<div class='sub-desc'><p>The configuration options for the Autolinker instance, specified in an Object (map).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker\" rel=\"Autolinker\" class=\"docClass\">Autolinker</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-createMatchReturnVal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-createMatchReturnVal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-createMatchReturnVal' class='name expandable'>createMatchReturnVal</a>( <span class='pre'>match, matchStr</span> ) : String<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Creates the return string value for a given match in the input string, for the processTextNode method. ...</div><div class='long'><p>Creates the return string value for a given match in the input string, for the <a href=\"#!/api/Autolinker-method-processTextNode\" rel=\"Autolinker-method-processTextNode\" class=\"docClass\">processTextNode</a> method.</p>\n\n<p>This method handles the <a href=\"#!/api/Autolinker-cfg-replaceFn\" rel=\"Autolinker-cfg-replaceFn\" class=\"docClass\">replaceFn</a>, if one was provided.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>match</span> : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a><div class='sub-desc'><p>The Match object that represents the match.</p>\n</div></li><li><span class='pre'>matchStr</span> : String<div class='sub-desc'><p>The original match string, after having been preprocessed to fix match edge cases (see\n  the <code>prefixStr</code> and <code>suffixStr</code> vars in <a href=\"#!/api/Autolinker-method-processTextNode\" rel=\"Autolinker-method-processTextNode\" class=\"docClass\">processTextNode</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The string that the <code>match</code> should be replaced with. This is usually the anchor tag string, but\n  may be the <code>matchStr</code> itself if the match is not to be replaced.</p>\n</div></li></ul></div></div></div><div id='method-getHtmlParser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-getHtmlParser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-getHtmlParser' class='name expandable'>getHtmlParser</a>( <span class='pre'></span> ) : <a href=\"#!/api/Autolinker.HtmlParser\" rel=\"Autolinker.HtmlParser\" class=\"docClass\">Autolinker.HtmlParser</a><span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>Lazily instantiates and returns the htmlParser instance for this Autolinker instance. ...</div><div class='long'><p>Lazily instantiates and returns the <a href=\"#!/api/Autolinker-property-htmlParser\" rel=\"Autolinker-property-htmlParser\" class=\"docClass\">htmlParser</a> instance for this Autolinker instance.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.HtmlParser\" rel=\"Autolinker.HtmlParser\" class=\"docClass\">Autolinker.HtmlParser</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getTagBuilder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-getTagBuilder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-getTagBuilder' class='name expandable'>getTagBuilder</a>( <span class='pre'></span> ) : <a href=\"#!/api/Autolinker.AnchorTagBuilder\" rel=\"Autolinker.AnchorTagBuilder\" class=\"docClass\">Autolinker.AnchorTagBuilder</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the tagBuilder instance for this Autolinker instance, lazily instantiating it\nif it does not yet exist. ...</div><div class='long'><p>Returns the <a href=\"#!/api/Autolinker-property-tagBuilder\" rel=\"Autolinker-property-tagBuilder\" class=\"docClass\">tagBuilder</a> instance for this Autolinker instance, lazily instantiating it\nif it does not yet exist.</p>\n\n<p>This method may be used in a <a href=\"#!/api/Autolinker-cfg-replaceFn\" rel=\"Autolinker-cfg-replaceFn\" class=\"docClass\">replaceFn</a> to generate the <a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">HtmlTag</a> instance that\nAutolinker would normally generate, and then allow for modifications before returning it. For example:</p>\n\n<pre><code>var html = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( \"Test google.com\", {\n    replaceFn : function( autolinker, match ) {\n        var tag = autolinker.getTagBuilder().build( match );  // returns an <a href=\"#!/api/Autolinker.HtmlTag\" rel=\"Autolinker.HtmlTag\" class=\"docClass\">Autolinker.HtmlTag</a> instance\n        tag.setAttr( 'rel', 'nofollow' );\n\n        return tag;\n    }\n} );\n\n// generated html:\n//   Test &lt;a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\"&gt;google.com&lt;/a&gt;\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Autolinker.AnchorTagBuilder\" rel=\"Autolinker.AnchorTagBuilder\" class=\"docClass\">Autolinker.AnchorTagBuilder</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-link' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-link' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-link' class='name expandable'>link</a>( <span class='pre'>textOrHtml</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. ...</div><div class='long'><p>Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML.\nDoes not link URLs found within HTML tags.</p>\n\n<p>For instance, if given the text: <code>You should go to http://www.yahoo.com</code>, then the result\nwill be <code>You should go to &amp;lt;a href=\"http://www.yahoo.com\"&amp;gt;http://www.yahoo.com&amp;lt;/a&amp;gt;</code></p>\n\n<p>This method finds the text around any HTML elements in the input <code>textOrHtml</code>, which will be the text that is processed.\nAny original HTML elements will be left as-is, as well as the text that is already wrapped in anchor (&lt;a&gt;) tags.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>textOrHtml</span> : String<div class='sub-desc'><p>The HTML or text to link URLs, email addresses, and Twitter handles within (depending on if\n  the <a href=\"#!/api/Autolinker-cfg-urls\" rel=\"Autolinker-cfg-urls\" class=\"docClass\">urls</a>, <a href=\"#!/api/Autolinker-cfg-email\" rel=\"Autolinker-cfg-email\" class=\"docClass\">email</a>, and <a href=\"#!/api/Autolinker-cfg-twitter\" rel=\"Autolinker-cfg-twitter\" class=\"docClass\">twitter</a> options are enabled).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The HTML, with URLs/emails/Twitter handles automatically linked.</p>\n</div></li></ul></div></div></div><div id='method-matchHasUnbalancedClosingParen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-matchHasUnbalancedClosingParen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-matchHasUnbalancedClosingParen' class='name expandable'>matchHasUnbalancedClosingParen</a>( <span class='pre'>matchStr</span> ) : Boolean<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Determines if a match found has an unmatched closing parenthesis. ...</div><div class='long'><p>Determines if a match found has an unmatched closing parenthesis. If so, this parenthesis will be removed\nfrom the match itself, and appended after the generated anchor tag in <a href=\"#!/api/Autolinker-method-processTextNode\" rel=\"Autolinker-method-processTextNode\" class=\"docClass\">processTextNode</a>.</p>\n\n<p>A match may have an extra closing parenthesis at the end of the match because the regular expression must include parenthesis\nfor URLs such as \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.</p>\n\n<p>However, an extra parenthesis <em>will</em> be included when the URL itself is wrapped in parenthesis, such as in the case of\n\"(wikipedia.com/something_(disambiguation))\". In this case, the last closing parenthesis should <em>not</em> be part of the URL\nitself, and this method will return <code>true</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>matchStr</span> : String<div class='sub-desc'><p>The full match string from the <a href=\"#!/api/Autolinker-property-matcherRegex\" rel=\"Autolinker-property-matcherRegex\" class=\"docClass\">matcherRegex</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if there is an unbalanced closing parenthesis at the end of the <code>matchStr</code>, <code>false</code> otherwise.</p>\n</div></li></ul></div></div></div><div id='method-processCandidateMatch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-processCandidateMatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-processCandidateMatch' class='name expandable'>processCandidateMatch</a>( <span class='pre'>matchStr, twitterMatch, twitterHandlePrefixWhitespaceChar, twitterHandle, emailAddressMatch, urlMatch, protocolUrlMatch, wwwProtocolRelativeMatch, tldProtocolRelativeMatch</span> ) : Object<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Processes a candidate match from the matcherRegex. ...</div><div class='long'><p>Processes a candidate match from the <a href=\"#!/api/Autolinker-property-matcherRegex\" rel=\"Autolinker-property-matcherRegex\" class=\"docClass\">matcherRegex</a>.</p>\n\n<p>Not all matches found by the regex are actual URL/email/Twitter matches, as determined by the <a href=\"#!/api/Autolinker-property-matchValidator\" rel=\"Autolinker-property-matchValidator\" class=\"docClass\">matchValidator</a>. In\nthis case, the method returns <code>null</code>. Otherwise, a valid Object with <code>prefixStr</code>, <code>match</code>, and <code>suffixStr</code> is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>matchStr</span> : String<div class='sub-desc'><p>The full match that was found by the <a href=\"#!/api/Autolinker-property-matcherRegex\" rel=\"Autolinker-property-matcherRegex\" class=\"docClass\">matcherRegex</a>.</p>\n</div></li><li><span class='pre'>twitterMatch</span> : String<div class='sub-desc'><p>The matched text of a Twitter handle, if the match is a Twitter match.</p>\n</div></li><li><span class='pre'>twitterHandlePrefixWhitespaceChar</span> : String<div class='sub-desc'><p>The whitespace char before the  sign in a Twitter handle match. This\n  is needed because of no lookbehinds in JS regexes, and is need to re-include the character for the anchor tag replacement.</p>\n</div></li><li><span class='pre'>twitterHandle</span> : String<div class='sub-desc'><p>The actual Twitter user (i.e the word after the  sign in a Twitter match).</p>\n</div></li><li><span class='pre'>emailAddressMatch</span> : String<div class='sub-desc'><p>The matched email address for an email address match.</p>\n</div></li><li><span class='pre'>urlMatch</span> : String<div class='sub-desc'><p>The matched URL string for a URL match.</p>\n</div></li><li><span class='pre'>protocolUrlMatch</span> : String<div class='sub-desc'><p>The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n  something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.</p>\n</div></li><li><span class='pre'>wwwProtocolRelativeMatch</span> : String<div class='sub-desc'><p>The '//' for a protocol-relative match from a 'www' url, with the character that\n  comes before the '//'.</p>\n</div></li><li><span class='pre'>tldProtocolRelativeMatch</span> : String<div class='sub-desc'><p>The '//' for a protocol-relative match from a TLD (top level domain) match, with\n  the character that comes before the '//'.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>A \"match description object\". This will be <code>null</code> if the match was invalid, or if a match type is disabled.\n  Otherwise, this will be an Object (map) with the following properties:</p>\n<ul><li><span class='pre'>prefixStr</span> : String<div class='sub-desc'><p>The char(s) that should be prepended to the replacement string. These are char(s) that\n  were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into\n  the replacement stream.</p>\n</div></li><li><span class='pre'>suffixStr</span> : String<div class='sub-desc'><p>The char(s) that should be appended to the replacement string. These are char(s) that\n  were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into\n  the replacement stream.</p>\n</div></li><li><span class='pre'>matchStr</span> : String<div class='sub-desc'><p>The <code>matchStr</code>, fixed up to remove characters that are no longer needed (which have been\n  added to <code>prefixStr</code> and <code>suffixStr</code>).</p>\n</div></li><li><span class='pre'>match</span> : <a href=\"#!/api/Autolinker.match.Match\" rel=\"Autolinker.match.Match\" class=\"docClass\">Autolinker.match.Match</a><div class='sub-desc'><p>The Match object that represents the match that was found.</p>\n</div></li></ul></div></li></ul></div></div></div><div id='method-processTextNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-method-processTextNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-method-processTextNode' class='name expandable'>processTextNode</a>( <span class='pre'>text</span> ) : String<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Process the text that lies inbetween HTML tags. ...</div><div class='long'><p>Process the text that lies inbetween HTML tags. This method does the actual wrapping of URLs with\nanchor tags.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : String<div class='sub-desc'><p>The text to auto-link.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The text with anchor tags auto-filled.</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-link' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Autolinker'>Autolinker</span><br/><a href='source/Autolinker.html#Autolinker-static-method-link' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Autolinker-static-method-link' class='name expandable'>link</a>( <span class='pre'>textOrHtml, [options]</span> ) : String<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. ...</div><div class='long'><p>Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML.\nDoes not link URLs found within HTML tags.</p>\n\n<p>For instance, if given the text: <code>You should go to http://www.yahoo.com</code>, then the result\nwill be <code>You should go to &amp;lt;a href=\"http://www.yahoo.com\"&amp;gt;http://www.yahoo.com&amp;lt;/a&amp;gt;</code></p>\n\n<p>Example:</p>\n\n<pre><code>var linkedText = <a href=\"#!/api/Autolinker-method-link\" rel=\"Autolinker-method-link\" class=\"docClass\">Autolinker.link</a>( \"Go to google.com\", { newWindow: false } );\n// Produces: \"Go to &lt;a href=\"http://google.com\"&gt;google.com&lt;/a&gt;\"\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>textOrHtml</span> : String<div class='sub-desc'><p>The HTML or text to find URLs, email addresses, and Twitter handles within (depending on if\n  the <a href=\"#!/api/Autolinker-cfg-urls\" rel=\"Autolinker-cfg-urls\" class=\"docClass\">urls</a>, <a href=\"#!/api/Autolinker-cfg-email\" rel=\"Autolinker-cfg-email\" class=\"docClass\">email</a>, and <a href=\"#!/api/Autolinker-cfg-twitter\" rel=\"Autolinker-cfg-twitter\" class=\"docClass\">twitter</a> options are enabled).</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>Any of the configuration options for the Autolinker class, specified in an Object (map).\n  See the class description for an example call.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The HTML text, with URLs automatically linked</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});