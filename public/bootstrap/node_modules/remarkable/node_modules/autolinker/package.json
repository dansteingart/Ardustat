{
  "name": "autolinker",
  "version": "0.15.0",
  "description": "Utility to automatically link the URLs, email addresses, and Twitter handles in a given block of text/HTML",
  "main": "dist/Autolinker.js",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gregjacobs/Autolinker.js.git"
  },
  "keywords": [
    "auto",
    "link",
    "autolink",
    "url",
    "urls",
    "anchor"
  ],
  "author": {
    "name": "Gregory Jacobs",
    "email": "greg@greg-jacobs.com"
  },
  "license": "MIT Licensed. http://www.opensource.org/licenses/mit-license.php",
  "bugs": {
    "url": "https://github.com/gregjacobs/Autolinker.js/issues"
  },
  "homepage": "https://github.com/gregjacobs/Autolinker.js",
  "devDependencies": {
    "grunt": "^0.4.4",
    "grunt-contrib-jasmine": "^0.6.4",
    "grunt-contrib-connect": "^0.7.1",
    "requirejs": "^2.1.11",
    "grunt-contrib-uglify": "^0.4.0",
    "grunt-contrib-concat": "^0.4.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-jsduck": "^1.0.1",
    "grunt-umd": "^2.0.1"
  },
  "readme": "# Autolinker.js\r\n\r\nBecause I had so much trouble finding a good autolinking implementation out in the wild, I decided to roll my own. It \r\nseemed that everything I found out there was either an implementation that didn't cover every case, or was just limited \r\nin one way or another. \r\n\r\nSo, this utility attempts to handle everything. It:\r\n\r\n- Autolinks URLs, whether or not they start with the protocol (i.e. 'http://'). In other words, it will automatically link the \r\n  text \"google.com\", as well as \"http://google.com\".\r\n- Will properly handle URLs with special characters\r\n- Will properly handle URLs with query parameters or a named anchor (i.e. hash)\r\n- Will autolink email addresses.\r\n- Will autolink Twitter handles.\r\n- Will properly handle HTML input. The utility will not change the `href` attribute inside anchor (&lt;a&gt;) tags (or any other \r\n  tag/attribute for that matter), and will not accidentally wrap the inner text of an anchor tag with a new one (which would cause \r\n  doubly-nested anchor tags).\r\n\r\nHope that this utility helps you as well!\r\n\r\n\r\n## Installation\r\n\r\n#### Download\r\n\r\nSimply clone or download the zip of the project, and link to either `dist/Autolinker.js` or `dist/Autolinker.min.js` with a script tag:\r\n\r\n```html\r\n<script src=\"path/to/Autolinker.min.js\"></script>\r\n```\r\n\r\n#### Using with the [Bower](http://bower.io) package manager:\r\n\r\nCommand line:\r\n\r\n```shell\r\nbower install Autolinker.js --save\r\n```\r\n\r\n#### Using with [Node.js](http://nodejs.org) via [npm](https://www.npmjs.org/):\r\n\r\nCommand Line:\r\n\r\n```shell\r\nnpm install autolinker --save\r\n```\r\n\r\nJavaScript:\r\n\r\n```javascript\r\nvar Autolinker = require( 'autolinker' );\r\n// note: npm wants an all-lowercase package name, but the utility is a class and should be \r\n// aliased with a captial letter\r\n```\r\n\r\n\r\n## Usage\r\n\r\nUsing the static [link()](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-static-method-link) method:\r\n\r\n```javascript\r\nvar linkedText = Autolinker.link( textToAutolink[, options] );\r\n```\r\n\r\nUsing as a class:\r\n\r\n```javascript\r\nvar autolinker = new Autolinker( [ options ] );\r\n\r\nvar linkedText = autolinker.link( textToAutoLink );\r\n```\r\n\r\nNote: if using the same options to autolink multiple pieces of html/text, it is slightly more efficient to create a single\r\nAutolinker instance, and run the [link()](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-method-link) method repeatedly (i.e. use the \"class\" form above).\r\n\r\n\t\r\n#### Example:\r\n\r\n```javascript\r\nvar linkedText = Autolinker.link( \"Check out google.com\", { className: \"myLink\" } );\r\n// Produces: \"Check out <a class=\"myLink myLink-url\" href=\"http://google.com\" target=\"_blank\">google.com</a>\"\r\n```\r\n\r\n## Options\r\n\r\nThese are the options which may be specified for linking. These are specified by providing an Object as the second parameter to [Autolinker.link()](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-static-method-link). These include:\r\n\r\n- [newWindow](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-newWindow) : Boolean<br />\r\n  `true` to have the links should open in a new window when clicked, `false` otherwise. Defaults to `true`.<br /><br />\r\n- [stripPrefix](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-stripPrefix) : Boolean<br />\r\n  `true` to have the 'http://' or 'https://' and/or the 'www.' stripped from the beginning of links, `false` otherwise. Defaults to `true`.<br /><br />\r\n- [truncate](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-truncate) : Number<br />\r\n  A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of a link. If the URL/email/twitter is over the number of characters, it will be truncated to this length by replacing the end of the string with a two period ellipsis ('..').<br /><br />\r\n  Example: a url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters may look like this: 'yahoo.com/some/long/pat..'<br /><br />\r\n- [className](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-className) : String<br />\r\n  A CSS class name to add to the generated anchor tags. This class will be added to all links, as well as this class\r\n  plus \"url\"/\"email\"/\"twitter\" suffixes for styling url/email/twitter links differently.\r\n  \r\n  For example, if this config is provided as \"myLink\", then:\r\n  \r\n  1) URL links will have the CSS classes: \"myLink myLink-url\"<br />\r\n  2) Email links will have the CSS classes: \"myLink myLink-email\", and<br />\r\n  3) Twitter links will have the CSS classes: \"myLink myLink-twitter\"<br />\r\n  \r\n- [urls](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-urls) : Boolean<br />\r\n  `true` to have URLs auto-linked, `false` to skip auto-linking of URLs. Defaults to `true`.<br />\r\n- [email](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-email) : Boolean<br />\r\n  `true` to have email addresses auto-linked, `false` to skip auto-linking of email addresses. Defaults to `true`.<br /><br />\r\n- [twitter](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-twitter) : Boolean<br />\r\n  `true` to have Twitter handles auto-linked, `false` to skip auto-linking of Twitter handles. Defaults to `true`.<br /><br />\r\n- [replaceFn](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-replaceFn) : Function<br />\r\n  A function to use to programmatically make replacements of matches in the input string, one at a time. See the section \r\n  <a href=\"#custom-replacement-function\">Custom Replacement Function</a> for more details.\r\n\r\n\r\nFor example, if you wanted to disable links from opening in [new windows](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-newWindow), you could do:\r\n\r\n```javascript\r\nvar linkedText = Autolinker.link( \"Check out google.com\", { newWindow: false } );\r\n// Produces: \"Check out <a href=\"http://google.com\">google.com</a>\"\r\n```\r\n\r\nAnd if you wanted to truncate the length of URLs (while also not opening in a new window), you could do:\r\n\r\n```javascript\r\nvar linkedText = Autolinker.link( \"http://www.yahoo.com/some/long/path/to/a/file\", { truncate: 25, newWindow: false } );\r\n// Produces: \"<a href=\"http://www.yahoo.com/some/long/path/to/a/file\">yahoo.com/some/long/pat..</a>\"\r\n```\r\n\r\n## More Examples\r\nOne could update an entire DOM element that has unlinked text to auto-link them as such:\r\n\r\n```javascript\r\nvar myTextEl = document.getElementById( 'text' );\r\nmyTextEl.innerHTML = Autolinker.link( myTextEl.innerHTML );\r\n```\r\n\r\nUsing the same pre-configured [Autolinker](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker) instance in multiple locations of a codebase (usually by dependency injection):\r\n\r\n```javascript\r\nvar autolinker = new Autolinker( { newWindow: false, truncate: 25 } );\r\n\r\n//...\r\n\r\nautolinker.link( \"Check out http://www.yahoo.com/some/long/path/to/a/file\" );\r\n// Produces: \"Check out <a href=\"http://www.yahoo.com/some/long/path/to/a/file\">yahoo.com/some/long/pat..</a>\"\r\n\r\n//...\r\n\r\nautolinker.link( \"Go to www.google.com\" );\r\n// Produces: \"Go to <a href=\"http://www.google.com\">google.com</a>\"\r\n\r\n```\r\n\r\n\r\n## Custom Replacement Function\r\n\r\nA custom replacement function ([replaceFn](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-cfg-replaceFn)) may be provided to replace url/email/twitter matches on an individual basis, based\r\non the return from this function.\r\n\r\nFull example, for purposes of documenting the API:\r\n\r\n```javascript\r\nvar input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\r\n\r\nvar linkedText = Autolinker.link( input, {\r\n    replaceFn : function( autolinker, match ) {\r\n        console.log( \"href = \", match.getAnchorHref() );\r\n        console.log( \"text = \", match.getAnchorText() );\r\n    \r\n        switch( match.getType() ) {\r\n            case 'url' : \r\n                console.log( \"url: \", match.getUrl() );\r\n        \t\t\r\n                if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\r\n                    var tag = autolinker.getTagBuilder().build( match );  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\r\n                    tag.setAttr( 'rel', 'nofollow' );\r\n                    tag.addClass( 'external-link' );\r\n        \r\n                    return tag;\r\n        \t\t\t\r\n                } else {\r\n                    return true;  // let Autolinker perform its normal anchor tag replacement\r\n                }\r\n        \t\t\r\n            case 'email' :\r\n                var email = match.getEmail();\r\n                console.log( \"email: \", email );\r\n        \t\t\r\n                if( email === \"my@own.address\" ) {\r\n                    return false;  // don't auto-link this particular email address; leave as-is\r\n                } else {\r\n                    return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\r\n                }\r\n        \t\r\n            case 'twitter' :\r\n                var twitterHandle = match.getTwitterHandle();\r\n                console.log( twitterHandle );\r\n        \r\n                return '<a href=\"http://newplace.to.link.twitter.handles.to/\">' + twitterHandle + '</a>';\r\n        }\r\n    }\r\n} );\r\n```\r\n\r\n\r\nThe function is provided two arguments:\r\n\r\n1. The Autolinker instance that is performing replacements. This can be used to query the options that the Autolinker\r\n   instance is configured with, or to retrieve its TagBuilder instance (via [autolinker.getTagBuilder()](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker-method-getTagBuilder)).\r\n2. An [Autolinker.match.Match](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker.match.Match) object which details the match that is to be replaced.\r\n\r\n\r\nA replacement of the match is made based on the return value of the function. The following return values may be provided:\r\n \r\n- No return value (`undefined`), or `true` (Boolean): Delegate back to Autolinker to replace the match as it normally would.\r\n- `false` (Boolean): Do not replace the current match at all - leave as-is.\r\n- Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for\r\n  the match.\r\n- An [Autolinker.HtmlTag](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker.HtmlTag) instance, which can be used to build/modify an HTML tag before writing out its HTML text.\r\n\r\n\r\n## Full API Docs\r\n\r\nThe full API docs for Autolinker may be referenced at: [http://gregjacobs.github.io/Autolinker.js/docs/](http://gregjacobs.github.io/Autolinker.js/docs/#!/api/Autolinker)\r\n\r\n\r\n## Changelog\r\n\r\nSee [Releases](https://github.com/gregjacobs/Autolinker.js/releases)\r\n",
  "readmeFilename": "README.md",
  "_id": "autolinker@0.15.0",
  "dist": {
    "shasum": "1e274c150f66739469263d2b8fe6fcc0c2457d35"
  },
  "_from": "autolinker@~ 0.15.0",
  "_resolved": "https://registry.npmjs.org/autolinker/-/autolinker-0.15.0.tgz"
}
