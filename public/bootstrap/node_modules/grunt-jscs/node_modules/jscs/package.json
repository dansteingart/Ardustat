{
  "author": {
    "name": "Marat Dulin",
    "email": "mdevils@yandex.ru"
  },
  "description": "JavaScript Code Style",
  "name": "jscs",
  "version": "1.7.3",
  "main": "lib/checker",
  "homepage": "https://github.com/jscs-dev/node-jscs",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/jscs-dev/node-jscs"
  },
  "bugs": {
    "url": "https://github.com/jscs-dev/node-jscs/issues"
  },
  "contributors": [
    {
      "name": "Marat Dulin",
      "email": "mdevils@yandex.ru"
    },
    {
      "name": "Konstantin Ikonnikov",
      "email": "ikokostya@gmail.com"
    },
    {
      "name": "Igor Agarlev"
    },
    {
      "name": "Alexey Androsov",
      "email": "doochik@ya.ru"
    },
    {
      "name": "Oleg Gaidarenko",
      "email": "markelog@gmail.com"
    },
    {
      "name": "Mike Sherov",
      "email": "mike.sherov@gmail.com"
    },
    {
      "name": "Joel Kemp",
      "email": "joel@mrjoelkemp.com"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "colors": "~0.6.2",
    "commander": "~2.3.0",
    "esprima": "~1.2.2",
    "esprima-harmony-jscs": "1.1.0-dev-harmony",
    "exit": "~0.1.2",
    "glob": "~4.0.0",
    "minimatch": "~1.0.0",
    "strip-json-comments": "~1.0.1",
    "vow": "~0.4.3",
    "vow-fs": "~0.3.1",
    "xmlbuilder": "~2.4.0",
    "supports-color": "~1.1.0"
  },
  "devDependencies": {
    "browserify": "~5.10.0",
    "coveralls": "~2.11.1",
    "has-ansi": "~1.0.0",
    "hooker": "~0.2.3",
    "jshint": "~2.5.0",
    "mocha": "~1.21.4",
    "rewire": "~2.1.0",
    "separated-coverage": "~2.3.0",
    "sinon": "~1.10.0",
    "xml2js": "~0.4.2"
  },
  "bin": {
    "jscs": "./bin/jscs"
  },
  "separated-coverage": {
    "common": [
      "-a",
      "lib",
      "-a",
      "test",
      "-s",
      "lib/**/*.js",
      "-t",
      "test/**/*.js",
      "-S",
      "relative",
      "-O",
      "sources=lib",
      "-O",
      "tests=test"
    ]
  },
  "scripts": {
    "lint": "jshint . && node bin/jscs lib test bin publish",
    "test": "npm run lint && mocha",
    "coverage": "scov run -p common",
    "coverage-html": "scov run -p common -r html -o coverage.html",
    "browserify": "browserify --standalone JscsStringChecker lib/string-checker.js -o jscs-browser.js",
    "changelog": "git log `git describe --tags --abbrev=0`..HEAD --pretty=format:' * %s (%an)' | grep -v 'Merge pull request'",
    "release": "node publish/prepublish && npm publish",
    "postpublish": "node publish/postpublish",
    "travis": "npm run test && scov run -p common -r lcov -o out.lcov && cat out.lcov | coveralls"
  },
  "files": [
    "bin",
    "lib",
    "presets",
    "LICENSE",
    "jscs-browser.js"
  ],
  "readme": "# node-jscs\n\n[![Build Status](https://travis-ci.org/jscs-dev/node-jscs.svg?branch=master)](https://travis-ci.org/jscs-dev/node-jscs) [![Coverage Status](https://img.shields.io/coveralls/jscs-dev/node-jscs.svg)](https://coveralls.io/r/jscs-dev/node-jscs?branch=master) [![Dependency Status](https://david-dm.org/jscs-dev/node-jscs.svg?theme=shields.io)](https://david-dm.org/jscs-dev/node-jscs) [![devDependency Status](https://david-dm.org/jscs-dev/node-jscs/dev-status.svg?theme=shields.io)](https://david-dm.org/jscs-dev/node-jscs#info=devDependencies)\n\nJSCS â€” JavaScript Code Style.\n\n\n`jscs` is a code style checker. You can configure `jscs` for your project in detail using **over 60** validation rules, including presets from popular style guides like jQuery.\n\n## Table of Contents\n\n- [Presets](#presets)\n- [Friendly Packages](#friendly-packages)\n- [Extensions](#extensions)\n- [Installation](#installation)\n- [CLI](#cli)\n- [Options](#options)\n- [Error Suppression](#error-suppression)\n- [Versioning & Semver](#versioning--semver)\n- [Rules](#rules)\n- [Removed Rules](#removed-rules)\n- [Browser Usage](#browser-usage)\n- [How to Contribute](https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md)\n\n## Presets\n\n * [Airbnb](presets/airbnb.json) - https://github.com/airbnb/javascript\n * [Crockford](presets/crockford.json) - http://javascript.crockford.com/code.html\n * [Google](presets/google.json) - https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\n * [jQuery](presets/jquery.json) - https://contribute.jquery.org/style-guide/js/\n * [MDCS](presets/mdcs.json) - https://github.com/mrdoob/three.js/wiki/Mr.doob's-Code-Style%E2%84%A2\n * [Wikimedia](presets/wikimedia.json) - https://www.mediawiki.org/wiki/Manual:Coding_conventions/JavaScript\n * [Yandex](presets/yandex.json) - https://github.com/ymaps/codestyle/blob/master/js.md\n\n## Friendly packages\n\n * Atom plugin: https://atom.io/packages/linter-jscs\n * Brackets Extension: https://github.com/globexdesigns/brackets-jscs\n * Grunt task: https://github.com/jscs-dev/grunt-jscs/\n * Gulp task: https://github.com/jscs-dev/gulp-jscs/\n * SublimeText 3 Plugin: https://github.com/SublimeLinter/SublimeLinter-jscs/\n * Syntastic VIM Plugin: [https://github.com/scrooloose/syntastic/.../syntax_checkers/javascript/jscs.vim/](https://github.com/scrooloose/syntastic/blob/master/syntax_checkers/javascript/jscs.vim/)\n * Web Essentials for Visual Studio 2013: https://github.com/madskristensen/WebEssentials2013/\n * IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm plugin: https://github.com/idok/jscs-plugin\n\n### Extensions\n\n * A team city reporter: https://github.com/wurmr/jscs-teamcity-reporter\n * JSdoc rules extension: https://github.com/jscs-dev/jscs-jsdoc\n\n## Installation\n\n`jscs` can be installed using `npm`:\n\n```\nnpm install jscs -g\n```\n\nTo run `jscs`, you can use the following command from the project root:\n\n```\njscs path[ path[...]]\n```\n\nYou can also pipe input into jscs:\n\n```\ncat myfile.js | jscs\n```\n\n## CLI\n\n### `--config`\nAllows to define path to the config file.\n```\njscs path[ path[...]] --config=./.config.json\n```\n\nIf there is no `--config` option specified, `jscs` it will consequentially search for `jscsConfig` option in `package.json` file then for `.jscsrc` and `.jscs.json` files in the current working directory then in nearest ancestor until it hits the system root.\n\n### `--preset`\nIf defined will use predefined rules for specific code style.\n```\njscs path[ path[...]] --preset=jquery\n```\n\n### `--reporter`\n`jscs` itself provides six reporters: `checkstyle`, `console`, `inline`, `junit` and `text`.\n```\njscs path[ path[...]] --reporter=console\n```\n\nBut you also can specify your own reporter, since this flag accepts relative or absolute paths too.\n```\njscs path[ path[...]] --reporter=./some-dir/my-reporter.js\n```\n\n### `--esnext`\nAttempts to parse your code as ES6 using the harmony version of the esprima parser. Please note that this is currently experimental, and will improve over time.\n\n### `--no-colors`\nClean output without colors.\n\n### `--max-errors`\nSet the maximum number of errors to report\n\n### `--help`\nOutputs usage information.\n\n### `--verbose`\nPrepends the name of the offending rule to all error messages.\n\n### `--version`\nOutputs version of `jscs`.\n\n## Options\n\n### additionalRules\n\nPath to load additional rules\n\nType: `Array`\n\nValues: Array of file matching patterns\n\n#### Example\n\n```js\n\"additionalRules\": [\"project-rules/*.js\"]\n```\n\n### preset\n\nExtends defined rules with preset rules.\n\nType: `String`\n\nValues: `\"airbnb\"`, `\"crockford\"`, `\"google\"`, `\"jquery\"`, `\"mdcs\"`, `\"wikimedia\"`, `\"yandex\"`\n\n#### Example\n\n```js\n\"preset\": \"jquery\"\n```\n\nIf you want specifically disable preset rule assign it to `null`, like so:\n```json\n{\n    \"preset\": \"jquery\",\n    \"requireCurlyBraces\": null\n}\n```\n\n### excludeFiles\n\nDisables style checking for specified paths.\n\nType: `Array`\n\nValues: Array of file matching patterns\n\n#### Example\n\n```js\n\"excludeFiles\": [\"node_modules/**\"]\n```\n\n### fileExtensions\n\nChanges the set of file extensions that will be processed.\n\nType: `Array` or `String` or `\"*\"`\n\nValues: A single file extension or an Array of file extensions, beginning with a `.`. The matching is case _insensitive_. If `\"*\"` is provided, all files regardless of extension will match.\n\n#### Example\n\n```js\n\"fileExtensions\": [\".js\", \".jsx\"]\n```\n\n#### Default\n\n```js\n\"fileExtensions\": [\".js\"]\n```\n\n### maxErrors\n\nSet the maximum number of errors to report\n\nType: `Number`\n\nDefault: Infinity\n\n#### Example\n\n```js\n\"maxErrors\": 10\n```\n\n### esnext\n\nAttempts to parse your code as ES6 using the harmony version of the esprima parser.\n\nType: `Boolean`\n\nValue: `true`\n\n#### Example\n\n```js\n\"esnext\": true\n```\n\n## Error Suppression\n\n### Inline Comments\n\nYou can disable and reenable rules inline with two special comments: `// jscs:disable` and `// jscs:enable`. Spacing in these comments is fairly lenient. All of the following are equivalent:\n```js\n/* jscs: enable */\n// jscs: enable\n```\nYou can use them to disable rules in several ways.\n\n#### Disabling All Rules\n\nSimply using `// jscs:disable` or `// jscs:enable` will disable all rules.\n```js\nvar a = b;\n// jscs:disable\nvar c = d; // all errors on this line will be ignored\n// jscs:enable\nvar e = f; // all errors on this line will be reported\n```\n\n#### Disabling Specific Rules\n\nIncluding a comma separated list of rules to modify after `// jscs:disable` or `// jscs:enable` will modify only those rules.\n```js\n// jscs:disable requireCurlyBraces\nif (x) y(); // all errors from requireCurlyBraces on this line will be ignored\n// jscs:enable requireCurlyBraces\nif (z) a(); // all errors, including from requireCurlyBraces, on this line will be reported\n```\n\nYou can enable all rules after disabling a specific rule, and that rule becomes reenabled as well.\n```js\n// jscs:disable requireCurlyBraces\nif (x) y(); // all errors from requireCurlyBraces on this line will be ignored\n// jscs:enable\nif (z) a(); // all errors, even from requireCurlyBraces, will be reported\n```\n\nYou can disable multiple rules at once and progressively reeanble them.\n```js\n// jscs:disable requireCurlyBraces, requireDotNotation\nif (x['a']) y(); // all errors from requireCurlyBraces OR requireDotNotation on this line will be ignored\n// jscs:enable requireCurlyBraces\nif (z['a']) a(); // all errors from requireDotNotation, but not requireCurlyBraces, will be ignored\n// jscs:enable requireDotNotation\nif (z['a']) a(); // all errors will be reported\n```\n\n## Versioning & Semver\n\nWe recommend installing JSCS via NPM using `^`, or `~` if you want more stable releases.\n\nSemver (http://semver.org/) dictates that breaking changes be major version bumps. In the context of a linting tool, a bug fix that causes more errors to be reported can be interpreted as a breaking change. However, that would require major version bumps to occur more often than can be desirable. Therefore, as a compromise, we will only release bug fixes that cause more errors to be reported in minor versions.\n\nBelow you fill find our versioning strategy, and what you can expect to come out of a new JSCS release.\n\n * Patch release:\n   * A bug fix in a rule that causes JSCS to report less errors.\n   * Docs, refactoring and other \"invisible\" changes for user;\n * Minor release:\n   * Any preset changes.\n   * A bug fix in a rule that causes JSCS to report more errors.\n   * New rules or new options for existing rules that don't change existing behavior.\n   * Modifying rules so they report less errors, and don't cause build failures.\n * Major release:\n   * Purposefully modifying existing rules so that they report more errors or change the meaning of a rule.\n   * Any architectural changes that could cause builds to fail.\n\n\n## Rules\n\n### requireCurlyBraces\n\nRequires curly braces after statements.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted keywords or `true` to require curly braces after the following keywords:\n\n```js\n[\n    'if',\n    'else',\n    'for',\n    'while',\n    'do',\n    'try',\n    'catch',\n    'case',\n    'default'\n]\n```\n\nJSHint: [`curly`](http://jshint.com/docs/options/#curly)\n\n#### Example\n\n```js\n\"requireCurlyBraces\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"try\",\n    \"catch\",\n    \"case\",\n    \"default\"\n]\n```\n\n##### Valid\n\n```js\nif (x) {\n    x++;\n}\n```\n\n##### Invalid\n\n```js\nif (x) x++;\n```\n\n### requireSpaceAfterKeywords\n\nRequires space after keyword.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted keywords or `true` to require all of the keywords below to have a space afterward.\n\n#### Example\n\n```js\n\"requireSpaceAfterKeywords\": [\n    \"do\",\n    \"for\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"case\",\n    \"try\",\n    \"catch\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"return\",\n    \"typeof\",\n    \"function\"\n]\n```\n\n##### Valid\n\n```js\nreturn true;\n```\n\n##### Invalid\n\n```js\nif(x) {\n    x++;\n}\n```\n\n### disallowSpaceAfterKeywords\n\nDisallows space after keyword.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted keywords or `true` to disallow spaces after all possible keywords.\n\n#### Example\n\n```js\n\"disallowSpaceAfterKeywords\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"switch\",\n    \"try\",\n    \"catch\"\n]\n```\n\n##### Valid\n\n```js\nif(x > y) {\n    y++;\n}\n```\n\n\n### requireSpaceBeforeBlockStatements\n\nRequires space before block statements (for loops, control structures).\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireSpaceBeforeBlockStatements\": true\n```\n\n##### Valid\n\n```js\nif (cond) {\n  foo();\n}\n\nfor (var e in elements) {\n  bar(e);\n}\n\nwhile (cond) {\n  foo();\n}\n```\n\n##### Invalid\n\n```js\nif (cond){\n  foo();\n}\n\nfor (var e in elements){\n  bar(e);\n}\n\nwhile (cond){\n  foo();\n}\n```\n\n\n### disallowSpaceBeforeBlockStatements\n\nDisallows space before block statements (for loops, control structures).\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpaceBeforeBlockStatements\": true\n```\n\n##### Valid\n\n```js\nif (cond){\n  foo();\n}\n\nfor (var e in elements){\n  bar(e);\n}\n\nwhile (cond){\n  foo();\n}\n```\n\n##### Invalid\n\n```js\nif (cond) {\n  foo();\n}\n\nfor (var e in elements) {\n  bar(e);\n}\n\nwhile (cond) {\n  foo();\n}\n```\n\n\n### requireParenthesesAroundIIFE\n\nRequires parentheses around immediately invoked function expressions.\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`immed`](http://www.jshint.com/docs/options/#immed)\n\n#### Example\n\n```js\n\"requireParenthesesAroundIIFE\": true\n```\n\n##### Valid\n\n```js\nvar a = (function(){ return 1; })();\nvar b = (function(){ return 2; }());\nvar c = (function(){ return 3; }).call(this, arg1);\nvar d = (function(){ return 3; }.call(this, arg1));\nvar e = (function(){ return d; }).apply(this, args);\nvar f = (function(){ return d; }.apply(this, args));\n```\n\n##### Invalid\n\n```js\nvar a = function(){ return 1; }();\nvar c = function(){ return 3; }.call(this, arg1);\nvar d = function(){ return d; }.apply(this, args);\n```\n\n\n### requireSpacesInConditionalExpression\n\nRequires space before and/or after `?` or `:` in conditional expressions.\n\nType: `Object` or `Boolean`\n\nValues: `\"afterTest\"`, `\"beforeConsequent\"`, `\"afterConsequent\"`, `\"beforeAlternate\"` as child properties, or `true` to set all properties to `true`. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"requireSpacesInConditionalExpression\": {\n    \"afterTest\": true,\n    \"beforeConsequent\": true,\n    \"afterConsequent\": true,\n    \"beforeAlternate\": true\n}\n```\n\n##### Valid\n\n```js\nvar a = b ? c : d;\nvar a= b ? c : d;\n```\n\n##### Invalid\n\n```js\nvar a = b? c : d;\nvar a = b ?c : d;\nvar a = b ? c: d;\nvar a = b ? c :d;\n```\n\n\n### disallowSpacesInConditionalExpression\n\nDisallows space before and/or after `?` or `:` in conditional expressions.\n\nType: `Object` or `Boolean`\n\nValues: `\"afterTest\"`, `\"beforeConsequent\"`, `\"afterConsequent\"`, `\"beforeAlternate\"` as child properties, or `true` to set all properties to true. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"disallowSpacesInConditionalExpression\": {\n    \"afterTest\": true,\n    \"beforeConsequent\": true,\n    \"afterConsequent\": true,\n    \"beforeAlternate\": true\n}\n```\n\n##### Valid\n\n```js\nvar a = b?c:d;\nvar a= b?c:d;\n```\n\n##### Invalid\n\n```js\nvar a = b ?c:d;\nvar a = b? c:d;\nvar a = b?c :d;\nvar a = b?c: d;\n```\n\n\n\n### requireSpacesInFunctionExpression\n\nRequires space before `()` or `{}` in function expressions (both named and anonymous).\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"requireSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction () {}\nfunction a () {}\n```\n\n##### Invalid\n\n```js\nfunction() {}\nfunction (){}\n```\n\n\n### disallowSpacesInFunctionExpression\n\nDisallows space before `()` or `{}` in function expressions (both named and anonymous).\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction(){}\nfunction a(){}\n```\n\n##### Invalid\n\n```js\nfunction () {}\nfunction a (){}\n```\n\n\n### requireSpacesInAnonymousFunctionExpression\n\nRequires space before `()` or `{}` in anonymous function expressions.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction () {}\n```\n\n##### Invalid\n\n```js\nfunction() {}\nfunction (){}\n```\n\n\n### disallowSpacesInAnonymousFunctionExpression\n\nDisallows space before `()` or `{}` in anonymous function expressions.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"disallowSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction(){}\n```\n\n##### Invalid\n\n```js\nfunction () {}\nfunction (){}\n```\n\n\n### requireSpacesInNamedFunctionExpression\n\nRequires space before `()` or `{}` in named function expressions.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"requireSpacesInNamedFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nvar x = function a () {}\n```\n\n##### Invalid\n\n```js\nvar x = function a() {}\nvar x = function a(){}\n```\n\n\n### disallowSpacesInNamedFunctionExpression\n\nDisallows space before `()` or `{}` in named function expressions.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"disallowSpacesInNamedFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction a(){}\n```\n\n##### Invalid\n\n```js\nfunction a () {}\nfunction a (){}\n```\n\n\n### requireSpacesInFunctionDeclaration\n\nRequires space before `()` or `{}` in function declarations.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"requireSpacesInFunctionDeclaration\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction a () {}\n```\n\n##### Invalid\n\n```js\nfunction a() {}\nfunction a (){}\n```\n\n\n### disallowSpacesInFunctionDeclaration\n\nDisallows space before `()` or `{}` in function declarations.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"disallowSpacesInFunctionDeclaration\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction a(){}\n```\n\n##### Invalid\n\n```js\nfunction a () {}\nfunction a (){}\n```\n\n\n### requireSpacesInFunction\n\nRequires space before `()` or `{}` in function declarations and expressions.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"requireSpacesInFunction\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction a () {}\n```\n\n##### Invalid\n\n```js\nfunction a() {}\nfunction a (){}\n```\n\n\n### disallowSpacesInFunction\n\nDisallows space before `()` or `{}` in function declarations and expressions.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"disallowSpacesInFunction\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction a(){}\n```\n\n##### Invalid\n\n```js\nfunction a () {}\nfunction a (){}\n```\n\n\n### requireSpacesInCallExpression\n\nRequires space before `()` in call expressions.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireSpacesInCallExpression\": true\n```\n\n##### Valid\n\n```js\nvar x = foobar ();\n```\n\n##### Invalid\n\n```js\nvar x = foobar();\n```\n\n\n### disallowSpacesInCallExpression\n\nDisallows space before `()` in call expressions.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpacesInCallExpression\": true\n```\n\n##### Valid\n\n```js\nvar x = foobar();\n```\n\n##### Invalid\n\n```js\nvar x = foobar ();\n```\n\n\n### disallowMultipleVarDecl\n\nDisallows multiple `var` declaration (except for-loop).\n\nType: `Boolean` or `String`\n\nValues: `true` or 'strict' (to disallow multiple variable declarations within a for loop)\n\n#### Example\n\n```js\n\"disallowMultipleVarDecl\": true\n```\n\n##### Valid\n\n```js\nvar x = 1;\nvar y = 2;\n\nfor (var i = 0, j = arr.length; i < j; i++) {}\n```\n\n##### Invalid\n\n```js\nvar x = 1,\n    y = 2;\n```\n\n### requireMultipleVarDecl\n\nRequires multiple `var` declaration.\n\nType: `Boolean` or `String`\n\nValues: `true` or `\"onevar\"`\n\nif `requireMultipleVarDecl` defined as a `true` value, it will report only consecutive vars, if, on the other hand,\nvalue equals to `\"onevar\"` string, `requireMultipleVarDecl` will allow only one `var` per function scope.\n\nJSHint: [`onevar`](http://jshint.com/docs/options/#onevar)\n\n#### Example\n\n```js\n\"requireMultipleVarDecl\": true\n```\n\n##### Valid\n\n```js\nvar x = 1,\n    y = 2;\n```\n\n##### Invalid\n\n```js\nvar x = 1;\nvar y = 2;\n```\n\n### requireBlocksOnNewline\n\nRequires blocks to begin and end with a newline\n\nType: `Boolean` or `Integer`\n\nValues: `true` validates all non-empty blocks, `Integer` specifies a minimum number of statements in the block before validating.\n\n#### Example\n\n```js\n\"requireBlocksOnNewline\": true\n```\n\n##### Valid for mode `true`\n\n```js\nif (true) {\n    doSomething();\n}\nvar abc = function() {};\n```\n\n##### Invalid\n\n```js\nif (true) {doSomething();}\n```\n\n##### Valid for mode `1`\n\n```js\nif (true) {\n    doSomething();\n    doSomethingElse();\n}\nif (true) { doSomething(); }\nvar abc = function() {};\n```\n\n##### Invalid\n\n```js\nif (true) { doSomething(); doSomethingElse(); }\n```\n\n### requirePaddingNewlinesInBlocks\n\nRequires blocks to begin and end with 2 newlines\n\nType: `Boolean` or `Integer`\n\nValues: `true` validates all non-empty blocks, `Integer` specifies a minimum number of statements in the block before validating.\n\n#### Example\n\n```js\n\"requirePaddingNewlinesInBlocks\": true\n```\n\n##### Valid for mode `true`\n\n```js\nif (true) {\n\n    doSomething();\n\n}\nvar abc = function() {};\n```\n\n##### Invalid\n\n```js\nif (true) {doSomething();}\nif (true) {\n    doSomething();\n}\n```\n\n##### Valid for mode `1`\n\n```js\nif (true) {\n\n    doSomething();\n    doSomethingElse();\n\n}\nif (true) {\n    doSomething();\n}\nif (true) { doSomething(); }\nvar abc = function() {};\n```\n\n##### Invalid\n\n```js\nif (true) { doSomething(); doSomethingElse(); }\nif (true) {\n    doSomething();\n    doSomethingElse();\n}\n```\n\n### disallowPaddingNewlinesInBlocks\n\nDisallows blocks from beginning and ending with 2 newlines.\n\nType: `Boolean`\n\nValues: `true` validates all non-empty blocks.\n\n#### Example\n\n```js\n\"disallowPaddingNewlinesInBlocks\": true\n```\n\n##### Valid\n\n```js\nif (true) {\n    doSomething();\n}\nif (true) {doSomething();}\nvar abc = function() {};\n```\n\n##### Invalid\n\n```js\nif (true) {\n\n    doSomething();\n\n}\n```\n\n### requirePaddingNewLinesInObjects\n\nRequires newline inside curly braces of all objects.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requirePaddingNewLinesInObjects\": true\n```\n\n##### Valid\n\n```js\nvar x = {\n    a: 1\n};\nfoo({\n    a: {\n        b: 1\n    }\n});\n```\n\n##### Invalid\n\n```js\nvar x = { a: 1 };\nfoo({a:{b:1}});\n```\n\n### disallowPaddingNewLinesInObjects\n\nDisallows newline inside curly braces of all objects.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowPaddingNewLinesInObjects\": true\n```\n\n##### Valid\n\n```js\nvar x = { a: 1 };\nfoo({a: {b: 1}});\n```\n\n##### Invalid\n\n```js\nvar x = {\n    a: 1\n};\nfoo({\n    a: {\n        b: 1\n    }\n});\n```\n\n### disallowEmptyBlocks\n\nDisallows empty blocks (except for catch blocks).\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`noempty`](http://jshint.com/docs/options/#noempty)\n\n#### Example\n\n```js\n\"disallowEmptyBlocks\": true\n```\n\n##### Valid\n\n```js\nif ( a == b ) { c = d; }\ntry { a = b; } catch( e ){}\n```\n\n##### Invalid\n\n```js\nif ( a == b ) { } else { c = d; }\n```\n\n### disallowSpacesInsideObjectBrackets\n\nDisallows space after opening object curly brace and before closing.\n\nType: `Boolean` or `String`\n\nValues: `\"all\"` or `true` for strict mode, `\"nested\"` ignores closing brackets in a row.\n\n#### Example\n\n```js\n\"disallowSpacesInsideObjectBrackets\": \"all\"\n```\n\n##### Valid for mode `\"all\"`\n\n```js\nvar x = {a: {b: 1}};\n```\n\n##### Valid for mode `\"nested\"`\n\n```js\nvar x = { a: {b: 1} };\n```\n\n##### Invalid\n\n```js\nvar x = { a: { b: 1 } };\n```\n\n### disallowSpacesInsideArrayBrackets\n\nDisallows space after opening array square bracket and before closing.\n\nType: `Boolean` or `String`\n\nValues: `\"all\"` or `true` for strict mode, `\"nested\"` ignores closing brackets in a row.\n\n#### Example\n\n```js\n\"disallowSpacesInsideArrayBrackets\": \"all\"\n```\n\n##### Valid for mode `\"all\"`\n\n```js\nvar x = [[1]];\n```\n\n##### Valid for mode `\"nested\"`\n\n```js\nvar x = [ [1] ];\n```\n\n##### Invalid\n\n```js\nvar x = [ [ 1 ] ];\n```\n\n### disallowSpacesInsideParentheses\n\nDisallows space after opening round bracket and before closing.\n\nType: `Object` or `Boolean`\n\nValues: `true` or Object with either `\"only\"` with array of tokens or `\"all\"` with `true` value\n\n#### Example\n\n```js\n\"disallowSpacesInsideParentheses\": true\n```\n\n##### Valid for `true` value\n\n```js\nvar x = (1 + 2) * 3;\n```\n\n##### Valid for `only` value\n\n```js\n\"disallowSpacesInsideParentheses\": { \"only\": [ \"{\", \"}\" ] }\n```\n\n```js\nvar x = ( 1 + 2 );\nvar x = foo({});\n```\n\n##### Invalid\n\n```js\nvar x = foo( {} );\n```\n\n### requireSpacesInsideObjectBrackets\n\nRequires space after opening object curly brace and before closing.\n\nType: `String`\n\nValues: `\"all\"` for strict mode, `\"allButNested\"` ignores closing brackets in a row.\n\n#### Example\n\n```js\n\"requireSpacesInsideObjectBrackets\": \"all\"\n```\n\n##### Valid for mode `\"all\"`\n\n```js\nvar x = { a: { b: 1 } };\n```\n\n##### Valid for mode `\"allButNested\"`\n\n```js\nvar x = { a: { b: 1 }};\n```\n\n##### Invalid\n\n```js\nvar x = {a: 1};\n```\n\n### requireSpacesInsideArrayBrackets\n\nRequires space after opening array square bracket and before closing.\n\nType: `String`\n\nValues: `\"all\"` for strict mode, `\"allButNested\"` ignores closing brackets in a row.\n\n#### Example\n\n```js\n\"requireSpacesInsideArrayBrackets\": \"all\"\n```\n\n##### Valid for mode `\"all\"`\n\n```js\nvar x = [ 1 ];\n```\n\n##### Valid for mode `\"allButNested\"`\n\n```js\nvar x = [[ 1 ], [ 2 ]];\n```\n\n##### Invalid\n\n```js\nvar x = [1];\n```\n\n### requireSpacesInsideParentheses\n\nRequires space after opening round bracket and before closing.\n\nType: `Object` or `String`\n\nValues: `\"all\"` for strict mode, `\"allButNested\"` (*deprecated* use `\"except\": ['(', ')']`) ignores nested brackets in a row, you could also specify token exceptions.\n\n#### Example\n\n```js\n\"requireSpacesInsideParentheses\": {\n    \"all\": true,\n    \"except\": [ \"{\", \"}\" ]\n}\n```\n\n##### Valid for mode `\"all\"`\n\n```js\nvar x = Math.pow( ( 1 + 2 ), ( 3 + 4 ) );\n```\n\n##### Valid for mode `\"allButNested\"`\n\n```js\nvar x = Math.pow(( 1 + 2 ), ( 3 + 4 ));\n```\n\n##### Valid for mode `\"all\"` with `except`\n\n```js\nvar x = Math.pow( foo({ test: 1 }) );\n```\n\n##### Invalid\n\n```js\nvar x = Math.pow(1 + 2, 3 + 4);\n```\n\n\n### disallowQuotedKeysInObjects\n\nDisallows quoted keys in object if possible.\n\nType: `String` or `Boolean`\n\nValues:\n\n - `true` for strict mode\n - `\"allButReserved\"` allows ES3+ reserved words to remain quoted which is helpful when using this option with JSHint's `es3` flag.\n\n#### Example\n\n```js\n\"disallowQuotedKeysInObjects\": true\n```\n\n##### Valid for mode `true`\n\n```js\nvar x = { a: { default: 1 } };\n```\n\n##### Valid for mode `\"allButReserved\"`\n\n```js\nvar x = {a: 1, 'default': 2};\n```\n\n##### Invalid\n\n```js\nvar x = {'a': 1};\n```\n\n### disallowDanglingUnderscores\n\nDisallows identifiers that start or end in `_`, except for some popular exceptions:\n\n - `_` (underscore.js)\n - `__filename` (node.js global)\n - `__dirname` (node.js global)\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`nomen`](http://www.jshint.com/docs/options/#nomen)\n\n#### Example\n\n```js\n\"disallowDanglingUnderscores\": true\n```\n\n##### Valid\n\n```js\nvar x = 1;\nvar y = _.extend;\nvar z = __dirname;\nvar w = __filename;\nvar x_y = 1;\n```\n\n##### Invalid\n\n```js\nvar _x = 1;\nvar x_ = 1;\nvar x_y_ = 1;\n```\n\n### disallowSpaceAfterObjectKeys\n\nDisallows space after object keys.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpaceAfterObjectKeys\": true\n```\n\n##### Valid\n```js\nvar x = {a: 1};\n```\n##### Invalid\n```js\nvar x = {a : 1};\n```\n\n### requireSpaceAfterObjectKeys\n\nRequires space after object keys.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireSpaceAfterObjectKeys\": true\n```\n\n##### Valid\n```js\nvar x = {a : 1};\n```\n##### Invalid\n```js\nvar x = {a: 1};\n```\n\n### disallowSpaceBeforeObjectValues\n\nDisallows space after object keys.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpaceBeforeObjectValues\": true\n```\n\n##### Valid\n```js\nvar x = {a:1};\n```\n##### Invalid\n```js\nvar x = {a: 1};\n```\n\n### requireSpaceBeforeObjectValues\n\nRequires space after object keys.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireSpaceBeforeObjectValues\": true\n```\n\n##### Valid\n```js\nvar x = {a: 1};\n```\n##### Invalid\n```js\nvar x = {a:1};\n```\n\n### disallowCommaBeforeLineBreak\n\nDisallows commas as last token on a line in lists.\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`laxcomma`](http://www.jshint.com/docs/options/#laxcomma)\n\n#### Example\n\n```js\n\"disallowCommaBeforeLineBreak\": true\n```\n\n##### Valid\n\n```js\nvar x = {\n    one: 1\n    , two: 2\n};\nvar y = { three: 3, four: 4};\n```\n\n##### Invalid\n\n```js\nvar x = {\n    one: 1,\n    two: 2\n};\n```\n\n### requireCommaBeforeLineBreak\n\nRequires commas as last token on a line in lists.\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`laxcomma`](http://www.jshint.com/docs/options/#laxcomma)\n\n#### Example\n\n```js\n\"requireCommaBeforeLineBreak\": true\n```\n\n##### Valid\n\n```js\nvar x = {\n    one: 1,\n    two: 2\n};\nvar y = { three: 3, four: 4};\n```\n\n##### Invalid\n\n```js\nvar x = {\n    one: 1\n    , two: 2\n};\n```\n\n### requireAlignedObjectValues\n\nRequires proper alignment in object literals.\n\nType: `String`\n\nValues:\n - `\"all\"` for strict mode,\n - `\"ignoreFunction\"` ignores objects if one of the property values is a function expression,\n - `\"ignoreLineBreak\"` ignores objects if there are line breaks between properties\n\n#### Example\n\n```js\n\"requireAlignedObjectValues\": \"all\"\n```\n\n##### Valid\n```js\nvar x = {\n    a   : 1,\n    bcd : 2,\n    ef  : 'str'\n};\n```\n##### Invalid\n```js\nvar x = {\n    a : 1,\n    bcd : 2,\n    ef : 'str'\n};\n```\n\n### requireOperatorBeforeLineBreak\n\nRequires operators to appear before line breaks and not after.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to require all possible binary operators to appear before line breaks\n\nJSHint: [`laxbreak`](http://www.jshint.com/docs/options/#laxbreak)\n\n#### Example\n\n```js\n\"requireOperatorBeforeLineBreak\": [\n    \"?\",\n    \"=\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\"\n]\n```\n\n##### Valid\n\n```js\nx = y ? 1 : 2;\nx = y ?\n    1 : 2;\n```\n\n##### Invalid\n\n```js\nx = y\n    ? 1 : 2;\n```\n\n### disallowSpaceAfterPrefixUnaryOperators\n\nRequires sticking unary operators to the right.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to disallow space after prefix for all unary operators\n\n#### Example\n\n```js\n\"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"]\n```\n\n##### Valid\n\n```js\nx = !y; y = ++z;\n```\n\n##### Invalid\n\n```js\nx = ! y; y = ++ z;\n```\n\n### requireSpaceAfterPrefixUnaryOperators\n\nDisallows sticking unary operators to the right.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to require space after prefix for all unary operators\n\n#### Example\n\n```js\n\"requireSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"]\n```\n\n##### Valid\n\n```js\nx = ! y; y = ++ z;\n```\n\n##### Invalid\n\n```js\nx = !y; y = ++z;\n```\n\n### disallowSpaceBeforePostfixUnaryOperators\n\nRequires sticking unary operators to the left.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to disallow space before postfix for all unary operators (i.e. increment/decrement operators)\n\n#### Example\n\n```js\n\"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"]\n```\n\n##### Valid\n\n```js\nx = y++; y = z--;\n```\n\n##### Invalid\n\n```js\nx = y ++; y = z --;\n```\n\n### requireSpaceBeforePostfixUnaryOperators\n\nDisallows sticking unary operators to the left.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to require space before postfix for all unary operators (i.e. increment/decrement operators)\n\n#### Example\n\n```js\n\"requireSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"]\n```\n\n##### Valid\n\n```js\nx = y ++; y = z --;\n```\n##### Invalid\n\n```js\nx = y++; y = z--;\n```\n\n### disallowSpaceBeforeBinaryOperators\n\nRequires sticking binary operators to the left.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to disallow space before all possible binary operators\n\n#### Example\n\n```js\n\"disallowSpaceBeforeBinaryOperators\": [\n    \"=\",\n    \",\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n    // etc\n]\n```\n\n##### Valid\n\n```js\nx+ y;\n```\n\n##### Invalid\n\n```js\nx + y;\n```\n\n### requireSpaceBeforeBinaryOperators\n\nDisallows sticking binary operators to the left.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to require space before all possible binary operators\nwithout comma operator, since it's rarely used with this rule\n\n\n#### Example\n\n```js\n\"requireSpaceBeforeBinaryOperators\": [\n    \"=\",\n    \",\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n    // etc\n]\n```\n\n##### Valid\n\n```js\nx !== y;\n```\n\n##### Invalid\n\n```js\nx!== y;\n```\n\n### disallowSpaceAfterBinaryOperators\n\nRequires sticking binary operators to the right.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to disallow space after all possible binary operators\n\n#### Example\n\n```js\n\"disallowSpaceAfterBinaryOperators\": [\n    \"=\",\n    \",\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n    // etc\n]\n```\n\n##### Valid\n\n```js\nx +y;\n```\n\n##### Invalid\n\n```js\nx+ y;\n```\n\n### requireSpaceAfterBinaryOperators\n\nDisallows sticking binary operators to the right.\n\nType: `Array` or `Boolean`\n\nValues: Array of quoted operators or `true` to require space after all possible binary operators\n\n#### Example\n\n```js\n\"requireSpaceAfterBinaryOperators\": [\n    \"=\",\n    \",\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n    // etc\n]\n```\n\n##### Valid\n\n```js\nx + y;\n```\n\n##### Invalid\n\n```js\nx +y;\n```\n\n### disallowImplicitTypeConversion\n\nDisallows implicit type conversion.\n\nType: `Array`\n\nValues: Array of quoted types\n\n#### Example\n\n```js\n\"disallowImplicitTypeConversion\": [\"numeric\", \"boolean\", \"binary\", \"string\"]\n```\n\n##### Valid\n\n```js\nx = Boolean(y);\nx = Number(y);\nx = String(y);\nx = s.indexOf('.') !== -1;\n```\n\n##### Invalid\n\n```js\nx = !!y;\nx = +y;\nx = '' + y;\nx = ~s.indexOf('.');\n```\n\n### requireCamelCaseOrUpperCaseIdentifiers\n\nRequires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES\n\nType: `Boolean` or `String`\n\nValues: `true` or `\"ignoreProperties\"`\n\nJSHint: [`camelcase`](http://jshint.com/docs/options/#camelcase)\n\n#### Example\n\n```js\n\"requireCamelCaseOrUpperCaseIdentifiers\": true\n```\n\n##### Valid for mode `true`\n\n```js\nvar camelCase = 0;\nvar CamelCase = 1;\nvar _camelCase = 2;\nvar camelCase_ = 3;\nvar UPPER_CASE = 4;\n```\n\n##### Invalid for mode `true`\n\n```js\nvar lower_case = 1;\nvar Mixed_case = 2;\nvar mixed_Case = 3;\n```\n\n##### Valid for mode `ignoreProperties`\n\n```js\nvar camelCase = 0;\nvar CamelCase = 1;\nvar _camelCase = 2;\nvar camelCase_ = 3;\nvar UPPER_CASE = 4;\nvar obj.snake_case = 5;\nvar camelCase = { snake_case: 6 };\n```\n\n##### Invalid for mode `ignoreProperties`\n\n```js\nvar lower_case = 1;\nvar Mixed_case = 2;\nvar mixed_Case = 3;\nvar snake_case = { snake_case: 6 };\n```\n\n### disallowKeywords\n\nDisallows usage of specified keywords.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"disallowKeywords\": [\"with\"]\n```\n\n##### Invalid\n\n```js\nwith (x) {\n    prop++;\n}\n```\n### disallowMultipleLineStrings\n\nDisallows strings that span multiple lines without using concatenation.\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`multistr`](http://www.jshint.com/docs/options/#multistr)\n\n#### Example\n\n```js\n\"disallowMultipleLineStrings\": true\n```\n\n##### Valid\n```js\nvar x = \"multi\" +\n        \"line\";\nvar y = \"single line\";\n```\n\n##### Invalid\n```js\nvar x = \"multi \\\n        line\";\n```\n\n### disallowMultipleLineBreaks\n\nDisallows multiple blank lines in a row.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowMultipleLineBreaks\": true\n```\n\n##### Valid\n```js\nvar x = 1;\n\nx++;\n```\n\n##### Invalid\n```js\nvar x = 1;\n\n\nx++;\n```\n\n### disallowMixedSpacesAndTabs\n\nRequires lines to not contain both spaces and tabs consecutively,\nor spaces after tabs only for alignment if \"smart\"\n\nType: `Boolean` or `String`\n\nValues: `true` or `\"smart\"`\n\nJSHint: [`smarttabs`](http://www.jshint.com/docs/options/#smarttabs)\n\n#### Example\n\n```js\n\"disallowMixedSpacesAndTabs\": true\n```\n\n##### Valid example for mode `true`\n\n```js\n\\tvar foo = \"blah blah\";\n\\s\\s\\s\\svar foo = \"blah blah\";\n\\t/**\n\\t\\s*\n\\t\\s*/ //a single space to align the star in a multi-line comment is allowed\n```\n\n##### Invalid example for mode `true`\n\n```js\n\\t\\svar foo = \"blah blah\";\n\\s\\tsvar foo = \"blah blah\";\n```\n\n##### Valid example for mode `\"smart\"`\n\n```js\n\\tvar foo = \"blah blah\";\n\\t\\svar foo = \"blah blah\";\n\\s\\s\\s\\svar foo = \"blah blah\";\n\\t/**\n\\t\\s*\n\\t\\s*/ //a single space to align the star in a multi-line comment is allowed\n```\n\n##### Invalid example for mode `\"smart\"`\n\n```js\n\\s\\tsvar foo = \"blah blah\";\n```\n\n### disallowTrailingWhitespace\n\nRequires all lines to end on a non-whitespace character\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`trailing`](http://jshint.com/docs/options/#trailing)\n\n#### Example\n\n```js\n\"disallowTrailingWhitespace\": true\n```\n\n##### Valid\n\n```js\nvar foo = \"blah blah\";\n```\n\n##### Invalid\n\n```js\nvar foo = \"blah blah\"; //<-- whitespace character here\n```\n\n### disallowTrailingComma\n\nDisallows an extra comma following the final element of an array or object literal.\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`es3`](http://jshint.com/docs/options/#es3)\n\n#### Example\n\n```js\n\"disallowTrailingComma\": true\n```\n\n##### Valid\n\n```js\nvar foo = [1, 2, 3];\nvar bar = {a: \"a\", b: \"b\"}\n```\n\n##### Invalid\n\n```js\nvar foo = [1, 2, 3, ];\nvar bar = {a: \"a\", b: \"b\", }\n```\n\n### requireTrailingComma\n\nRequires an extra comma following the final element of an array or object literal.\n\nType: `Boolean` or `Object`\n\nValues:\n\n- `true`: validates all arrays and objects\n- `Object`:\n   - `ignoreSingleValue`: allows single property objects and single element arrays to not require a trailing comma\n\n#### Example\n\n```js\n\"requireTrailingComma\": true\n```\n\n##### Valid\n\n```js\nvar foo = [1, 2, 3,];\nvar bar = {a: \"a\", b: \"b\",}\n```\n\n##### Valid with ignoreSingleValue\n\n```js\nvar car = [1];\nvar dar = {a: \"a\"};\n```\n\n##### Invalid\n\n```js\nvar foo = [1, 2, 3];\nvar bar = {a: \"a\", b: \"b\"}\n```\n\n### disallowKeywordsOnNewLine\n\nDisallows placing keywords on a new line.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"disallowKeywordsOnNewLine\": [\"else\"]\n```\n\n##### Valid\n\n```js\nif (x < 0) {\n    x++;\n} else {\n    x--;\n}\n```\n\n##### Invalid\n\n```js\nif (x < 0) {\n    x++;\n}\nelse {\n    x--;\n}\n```\n\n### requireKeywordsOnNewLine\n\nRequires placing keywords on a new line.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"requireKeywordsOnNewLine\": [\"else\"]\n```\n\n##### Valid\n\n```js\nif (x < 0) {\n    x++;\n}\nelse {\n    x--;\n}\n```\n\n##### Invalid\n\n```js\nif (x < 0) {\n    x++;\n} else {\n    x--;\n}\n```\n\n### requireLineFeedAtFileEnd\n\nRequires placing line feed at file end.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireLineFeedAtFileEnd\": true\n```\n\n### maximumLineLength\n\nRequires all lines to be at most the number of characters specified\n\nType: `Integer` or `Object`\n\nValues:\n - `Integer`: lines should be at most the number of characters specified\n - `Object`:\n    - `value`: (required) lines should be at most the number of characters specified\n    - `tabSize`: (default: `1`) considered the tab character as number of specified spaces\n    - `allowComments`: (default: `false`) allows comments to break the rule\n    - `allowUrlComments`: (default: `false`) allows comments with long urls to break the rule\n    - `allowRegex`: (default: `false`) allows regular expression literals to break the rule\n\nJSHint: [`maxlen`](http://jshint.com/docs/options/#maxlen)\n\n#### Example\n\n```js\n\"maximumLineLength\": 40\n```\n\n##### Valid\n\n```js\nvar aLineOf40Chars = 123456789012345678;\n```\n\n##### Invalid\n\n```js\nvar aLineOf41Chars = 1234567890123456789;\n```\n\n### requireCapitalizedConstructors\n\nRequires constructors to be capitalized (except for `this`)\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`newcap`](http://jshint.com/docs/options/#newcap)\n\n#### Example\n\n```js\n\"requireCapitalizedConstructors\": true\n```\n\n##### Valid\n\n```js\nvar a = new B();\nvar c = new this();\n```\n\n##### Invalid\n\n```js\nvar d = new e();\n```\n\n### requireDotNotation\n\nRequires member expressions to use dot notation when possible\n\nType: `Boolean`\n\nValues: `true`\n\nJSHint: [`sub`](http://www.jshint.com/docs/options/#sub)\n\n#### Example\n\n```js\n\"requireDotNotation\": true\n```\n\n##### Valid\n\n```js\nvar a = b[c];\nvar a = b.c;\nvar a = b[c.d];\nvar a = b[1];\nvar a = b['while']; //reserved word\n```\n\n##### Invalid\n\n```js\nvar a = b['c'];\n```\n\n### requireYodaConditions\n\nRequires the variable to be the right hand operator when doing a boolean comparison\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireYodaConditions\": true\n```\n\n##### Valid\n```js\nif (1 == a) {\n  return\n}\n```\n\n##### Invalid\n\n```js\nif (a == 1) {\n  return\n}\n```\n\n### disallowYodaConditions\n\nRequires the variable to be the left hand operator when doing a boolean comparison\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowYodaConditions\": true\n```\n\n##### Valid\n\n```js\nif (a == 1) {\n  return\n}\n```\n\n##### Invalid\n\n```js\nif (1 == a) {\n  return\n}\n```\n\n### requireSpaceAfterLineComment\n\nRequires that a line comment (`//`) be followed by a space or slash space (`/// `).\n\nType: `Boolean` or `String`\n\nValues: `true` or `'allowSlash'`\n\n#### Example\n\n```js\n\"requireSpaceAfterLineComment\": true\n```\n\n##### Valid\n\n```js\n// A comment\n/*A comment*/\n```\n\n##### Invalid\n\n```js\n//A comment\n```\n\n### disallowSpaceAfterLineComment\n\nRequires that a line comment (`//`) not be followed by a space.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpaceAfterLineComment\": true\n```\n\n##### Valid\n\n```js\n//A comment\n/* A comment*/\n```\n\n##### Invalid\n\n```js\n// A comment\n```\n\n### disallowAnonymousFunctions\n\nRequires that a function expression be named.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowAnonymousFunctions\": true\n```\n\n##### Valid\n\n```js\nvar a = function foo(){\n\n};\n\n$('#foo').click(function bar(){\n\n};)\n```\n\n##### Invalid\n\n```js\nvar a = function(){\n\n};\n\n$('#foo').click(function(){\n\n};)\n```\n\n### requireAnonymousFunctions\n\nRequires that a function expression be anonymous.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireAnonymousFunctions\": true\n```\n\n##### Valid\n\n```js\nvar a = function(){\n\n};\n\n$('#foo').click(function(){\n\n};)\n```\n\n##### Invalid\n\n```js\nvar a = function foo(){\n\n};\n\n$('#foo').click(function bar(){\n\n};)\n```\n\n### disallowFunctionDeclarations\n\nDisallows function declarations.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowFunctionDeclarations\": true\n```\n\n##### Valid\n\n```js\nvar expressed = function() {\n\n};\n\nvar expressed = function deeply() {\n\n};\n\n$('#foo').click(function bar() {\n\n};)\n```\n\n##### Invalid\n\n```js\nfunction stated() {\n\n}\n```\n\n### requireFunctionDeclarations\n\nRequires function declarations by disallowing assignment of functions\nexpressions to variables. Function expressions are allowed in all other\ncontexts, including when passed as function arguments or immediately invoked.\n\nAssignment of function expressions to object members is also permitted, since\nthese can't be declared.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireFunctionDeclarations\": true\n```\n\n##### Valid\n\n```js\nfunction declared() {\n\n};\n\n(function iife() {\n    void 0;\n})();\n\nvar obj = {\n    a: function () {}\n};\n\nobj.b = function () { };\n\n$('#foo').click(function bar() {\n\n};)\n```\n\n##### Invalid\n\n```js\nvar expressed = function() {\n\n};\n\nvar expressed = function deeply() {\n\n};\n```\n\n### disallowNewlineBeforeBlockStatements\n\nDisallows newline before opening curly brace of all block statements.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowNewlineBeforeBlockStatements\": true\n```\n\n##### Valid\n\n```js\nfunction good(){\n    var obj = {\n        val: true\n    };\n\n    return {\n        data: obj\n    };\n}\n\nif (cond){\n    foo();\n}\n\nfor (var e in elements){\n    bar(e);\n}\n\nwhile (cond){\n    foo();\n}\n```\n\n##### Invalid\n\n```js\nfunction bad()\n{\n    var obj =\n    {\n        val: true\n    };\n\n    return {\n        data: obj\n    };\n}\n\nif (cond)\n{\n    foo();\n}\n\nfor (var e in elements)\n{\n    bar(e);\n}\n\nwhile (cond)\n{\n    foo();\n}\n```\n\n### requireNewlineBeforeBlockStatements\n\nRequires newline before opening curly brace of all block statements.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireNewlineBeforeBlockStatements\": true\n```\n\n##### Valid\n\n```js\nfunction good()\n{\n    var obj =\n    {\n        val: true\n    };\n\n    return {\n        data: obj\n    };\n}\n\nif (cond)\n{\n    foo();\n}\n\nfor (var e in elements)\n{\n    bar(e);\n}\n\nwhile (cond)\n{\n    foo();\n}\n```\n\n##### Invalid\n\n```js\nfunction bad(){\n    var obj = {\n        val: true\n    };\n\n    return {\n        data: obj\n    };\n}\n\nif (cond){\n    foo();\n}\n\nfor (var e in elements){\n    bar(e);\n}\n\nwhile (cond){\n    foo();\n}\n```\n\n### validateLineBreaks\n\nOption to check line break characters\n\nType: `String`\n\nValues: `\"CR\"`, `\"LF\"`, `\"CRLF\"`\n\n#### Example\n\n```js\n\"validateLineBreaks\": \"LF\"\n```\n\n##### Valid\n```js\nvar x = 1;<LF>\nx++;\n```\n\n##### Invalid\n```js\nvar x = 1;<CRLF>\nx++;\n```\n\n### validateQuoteMarks\n\nRequires all quote marks to be either the supplied value, or consistent if `true`\n\nType: `String` or `Object`\n\nValues:\n - `\"\\\"\"`: all strings require double quotes\n - `\"'\"`: all strings require single quotes\n - `true`: all strings require the quote mark first encountered in the source code\n - `Object`:\n    - `escape`: allow the \"other\" quote mark to be used, but only to avoid having to escape\n    - `mark`: the same effect as the non-object values\n\nJSHint: [`quotmark`](http://jshint.com/docs/options/#quotmark)\n\n#### Example\n\n```js\n\"validateQuoteMarks\": \"\\\"\"\n```\n```js\n\"validateQuoteMarks\": { \"mark\": \"\\\"\", \"escape\": true }\n```\n\n##### Valid example for mode `{ \"mark\": \"\\\"\", \"escape\": true }`\n\n```js\nvar x = \"x\";\nvar y = '\"x\"';\n```\n##### Invalid example for mode `{ \"mark\": \"\\\"\", \"escape\": true }`\n\n```js\nvar x = \"x\";\nvar y = 'x';\n```\n\n##### Valid example for mode `\"\\\"\"` or mode `true`\n\n```js\nvar x = \"x\";\n```\n\n##### Valid example for mode `\"'\"` or mode `true`\n\n```js\nvar x = 'x';\n```\n\n##### Invalid example for mode `true`\n\n```js\nvar x = \"x\", y = 'y';\n```\n\n### validateIndentation\n\nValidates indentation for switch statements and block statements\n\nType: `Integer` or `String`\n\nValues: A positive integer or `\"\\t\"`\n\nJSHint: [`indent`](http://jshint.com/docs/options/#indent)\n\n#### Example\n\n```js\n\"validateIndentation\": \"\\t\"\n```\n\n##### Valid example for mode `2`\n\n```js\nif (a) {\n  b=c;\n  function(d) {\n    e=f;\n  }\n}\n```\n\n##### Invalid example for mode `2`\n\n```js\nif (a) {\n   b=c;\nfunction(d) {\n       e=f;\n}\n}\n```\n\n##### Valid example for mode \"\\t\"\n\n```js\nif (a) {\n    b=c;\n    function(d) {\n        e=f;\n    }\n}\n```\n\n##### Invalid example for mode \"\\t\"\n\n```js\nif (a) {\n     b=c;\nfunction(d) {\n           e=f;\n }\n}\n```\n\n### validateParameterSeparator\n\nEnable validation of separators between function parameters.\n\nType: `String`\n\nValues:\n\n - `\", \"`: function parameters are immediately followed by a comma then a space\n - `\" ,\"`: function parameters are immediately followed by a space then a comma\n - `\" , \"`: function parameters are immediately followed by a space, a comma then a space\n\n#### Example\n\n```js\n\"validateParameterSeparator\": \", \"\n```\n\n##### Valid\n\n```js\nfunction a(b, c) {}\n```\n\n##### Invalid\n\n```js\nfunction a(b , c) {}\n```\n\n### requireCapitalizedComments\n\nRequires the first alphabetical character of a comment to be uppercase\n\nType: `Boolean`\n\nValue: `true`\n\n#### Example\n\n`requireCapitalizedComments: true`\n\nValid:\n\n```\n// Valid\n//Valid\n\n/*\n  Valid\n */\n\n/**\n * Valid\n */\n\n// 123 or any non-alphabetical starting character\n```\n\nInvalid:\n```\n// invalid\n//invalid\n/** invalid */\n/**\n * invalid\n */\n```\n\n### disallowCapitalizedComments\n\nRequires the first alphabetical character of a comment to be lowercase.\n\nType: `String`\n\nValue: `true`\n\n#### Example\n\n`disallowCapitalizedComments: true`\n\nValid:\n\n```\n// valid\n//valid\n\n/*\n  valid\n */\n\n/**\n * valid\n */\n\n// 123 or any non-alphabetical starting character\n```\n\nInvalid:\n```\n// Invalid\n//Invalid\n/** Invalid */\n/**\n * Invalid\n */\n```\n\n### ~~validateJSDoc~~\n\nPlease use the [JSCS-JSDoc](https://github.com/jscs-dev/jscs-jsdoc) plugin instead.\n\n### safeContextKeyword\n\nOption to check `var that = this` expressions\n\nType: `Array` or `String`\n\nValues: String value used for context local declaration\n\n#### Example\n\n```js\n\"safeContextKeyword\": [\"that\"]\n```\n\n##### Valid\n\n```js\nvar that = this;\n```\n\n##### Invalid\n\n```js\nvar _this = this;\n```\n\n## Removed Rules\n\n### ~~disallowLeftStickedOperators~~\n\nUse the following rules instead:\n\n* requireSpaceBeforeBinaryOperators\n* requireSpaceBeforePostfixUnaryOperators\n* requireSpacesInConditionalExpression\n\n### ~~disallowRightStickedOperators~~\n\nUse the following rules instead:\n\n* requireSpaceAfterBinaryOperators\n* requireSpaceAfterPrefixUnaryOperators\n* requireSpacesInConditionalExpression\n\n### ~~requireLeftStickedOperators~~\n\nUse the following rules instead:\n\n* disallowSpaceBeforeBinaryOperators\n* disallowSpaceBeforePostfixUnaryOperators\n* disallowSpacesInConditionalExpression\n\n### ~~requireRightStickedOperators~~\n\nUse the following rules instead:\n\n* disallowSpaceAfterBinaryOperators\n* disallowSpaceAfterPrefixUnaryOperators\n* disallowSpacesInConditionalExpression\n\n## Browser Usage\n\nThe npm package contains a file named `jscs-browser.js` (since version `1.5.7`), which is a browser compatible version of `jscs`.\n\nIf you'd like to generate this file yourself, run `npm run browserify` after cloning this repo.\n\nUse `jscs-browser.js` on your page as follows:\n\n```html\n<script src=\"jscs-browser.js\"></script>\n<script>\n    var checker = new JscsStringChecker();\n    checker.registerDefaultRules();\n    checker.configure({disallowMultipleVarDecl: true});\n    var errors = checker.checkString('var x, y = 1;');\n    errors.getErrorList().forEach(function(error) {\n        console.log(errors.explainError(error));\n    });\n</script>\n```\n",
  "readmeFilename": "README.md",
  "_id": "jscs@1.7.3",
  "dist": {
    "shasum": "73a14b0453930f8f0d41134d3ac238ff0cb266d1"
  },
  "_from": "jscs@~1.7.2",
  "_resolved": "https://registry.npmjs.org/jscs/-/jscs-1.7.3.tgz"
}
