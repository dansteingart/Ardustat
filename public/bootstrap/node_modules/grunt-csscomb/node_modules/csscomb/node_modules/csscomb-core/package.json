{
  "name": "csscomb-core",
  "version": "2.0.4",
  "description": "Framework for writing postprocessors",
  "dependencies": {
    "gonzales-pe": "3.0.0-10",
    "minimatch": "0.2.12",
    "vow": "0.4.4",
    "vow-fs": "0.3.2"
  },
  "main": "lib/core.js",
  "maintainers": [
    {
      "name": "Tony Ganch",
      "email": "tonyganch+github@gmail.com",
      "url": "http://tonyganch.com/"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/csscomb/core"
  },
  "readme": "# CSScomb Core\n\nCSScomb Core is a framework for writing postprocessors.  \nIt provides you with a nice set of features:\n\n1. Parser with support of preprocessors\n1. API to create and use options\n1. API to process files and directories\n\n\n## Usage\n\n```js\nvar Comb = require('csscomb-core');\n// Constructor accepts a list of options to use and list of acceptable syntaxes.\nvar comb = new Comb(options, 'css');\n```\n\nFor a simple example of usage take a look [at a template project](https://github.com/csscomb/core-template).  \nFeel free to fork it and modify.\n\n## List of public methods\n\nThere are a number of methods that become available once you create an instance.\n\n### comb.use(option)\n\nUse a plugin.\n\n- Params: *{Object}*  Option's plugin\n- Return: *{CombCore}*  Instance's object\n\n### comb.configure(config)\n\nLoad configuration from JSON.  \nActivate and configure needed options.\n\n- Params: *{Object}*  Config\n- Return: *{CombCore}*  Instance's object\n\n### comb.getOptionsOrder()\n\nGet list of available options in exact order they will be processed.  \nCan be used for testing purpose.\n\n- Return: *{Array}*  List of options' names\n\n### comb.getValue(optionName)\n\nGet option's value.  \nCan be used inside plugin's `process` method.\n\n- Params: *{String}*  Option's name\n- Return: Value set by user for this option\n\n### comb.getSyntax()\n\nGet name of syntax that is currently being used.  \nCan be used inside plugin's `process` method.\n\n- Return: *{String}*  Syntax name\n\n### comb.processPath(path)\n\nProcess a file or a directory.\n\n- Params: *{String}*  Path to file or directory</td>\n- Return: *{Promise}*\n\n### comb.processDirectory(path)\n\nProcess all files in a directory.\n\n- Params: *{String}*  Path to directory\n- Return: *{Promise}*\n\n### comb.processFile(path)\n\nProcess a single file.\n\n- Params: *{String}*  Path to file\n- Return: *{Promise}*\n\n### comb.processString(string, options)\n\nProcess a string.\n\n- Params:  \n  *{String}*  Code to process  \n  *{{context: String, filename: String, syntax: String}}* Options (optional)\n  where *context* is\n  Gonzales PE rule, *filename* is a file's name that is used to display errors and\n  *syntax* is syntax name with `css` being a default value.  \n- Return: *{String}*  Processed string\n\n## Writing a plugin\n\nA plugin is a JavaScript object that has methods to set value and process AST\nnodes.  \nTake a look at [Flip Comb](https://github.com/csscomb/core-template/blob/master/lib/options/flip-comments.js) for an example.  \nThere are some fields you should take care of.\n\n### name\n\nOption's name as it should be used in config.\n\n- Required: yes\n- Acceptable value: *{String}*\n- Example: `\"flip-comments\"`\n\n### syntax\n\nList of syntaxes the option supports.  \nThis depends on parser possibilities.  \nCurrently the following work fine: `css`, `less`, `sass` and `scss`.\n\n- Required: yes\n- Acceptable value: *{Array}*\n- Example: `['css']`\n\n### accepts\n\nIn order to tell CSScomb Core which values are acceptable, plugin should have\neither `accepts` or `setValue` field.  \n`accepts` should be used to provide patterns, while `setValue` is good for\nmodifying value before using it.\n\nYou can use one or several of the following:  \n– `boolean: [true]`  \n– `boolean: [false]`  \n– `boolean: [true, false]`  \n– `string: /regexp/`  \n– `number: true`\n\n- Required: no, but if this field is missed, `setValue` must be set\n- Acceptable value: *{Object}*\n- Example: `{ boolean: [true] }`\n\n### setValue\n\nFunction to modify option's value before using it.  \nThis field overrides `accepts` field if it's set in the plugin too.\n\n- Required: no, but if this field is missed, `accepts` must be set\n- Acceptable value: *{Function}*\n- Example: ` function(value) { return value * 4; }`\n\n### runBefore\n\nRun the plugin before another option.  \n\n- Required: no\n- Acceptable value: *{String}* Another option's name\n- Example: `\"block-indent\"`\n\n### process\n\nModify AST nodes.\n\n- Required: yes\n- Acceptable value: *{Function}*\n- Example: <pre><code>function(nodeType, nodeContent) {\n        if (nodeType === 'commentML') node[0] = ' (╯°□°）╯︵ ┻━┻ ';\n}</code></pre>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/csscomb/core/issues"
  },
  "_id": "csscomb-core@2.0.4",
  "dist": {
    "shasum": "dec02f1599c03d5befd5aa45d914a51240fe0035"
  },
  "_from": "csscomb-core@~2.0.0",
  "_resolved": "https://registry.npmjs.org/csscomb-core/-/csscomb-core-2.0.4.tgz"
}
