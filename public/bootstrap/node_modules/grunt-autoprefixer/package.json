{
  "name": "grunt-autoprefixer",
  "version": "1.0.1",
  "description": "Parse CSS and add vendor-prefixed CSS properties using the Can I Use database. Based on Autoprefixer.",
  "author": {
    "name": "Dmitry Nikitenko",
    "email": "dima.nikitenko@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nDmitry/grunt-autoprefixer"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "keywords": [
    "gruntplugin",
    "css",
    "postprocessor",
    "prefix",
    "autoprefixer"
  ],
  "files": [
    "tasks",
    "LICENSE"
  ],
  "dependencies": {
    "autoprefixer-core": "^3.0.0",
    "diff": "~1.0.8",
    "chalk": "~0.5.0"
  },
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.4.0",
    "grunt-contrib-copy": "~0.5.0",
    "load-grunt-tasks": "~0.6.0",
    "time-grunt": "~1.0.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "readme": "# grunt-autoprefixer\n[![Build Status](https://travis-ci.org/nDmitry/grunt-autoprefixer.png?branch=master)](https://travis-ci.org/nDmitry/grunt-autoprefixer)\n[![Dependency Status](https://david-dm.org/nDmitry/grunt-autoprefixer.png)](https://david-dm.org/nDmitry/grunt-autoprefixer)\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n\n> [Autoprefixer](https://github.com/postcss/autoprefixer) parses CSS and adds vendor-prefixed CSS properties using the [Can I Use](http://caniuse.com/) database.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-autoprefixer --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-autoprefixer');\n```\n\n## The \"autoprefixer\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `autoprefixer` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  autoprefixer: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.browsers\nType: `Array`\nDefault value: `['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1']`\n\nYou can specify browsers actual for your project:\n\n```js\noptions: {\n  browsers: ['last 2 version', 'ie 8', 'ie 9']\n}\n```\n\n[Read more](https://github.com/postcss/autoprefixer#browsers).\n\n#### options.cascade\nType: `Boolean`\nDefault value: `true`\n\nPass `false` to disable ‘cascade’ indentation. Read more [here](https://github.com/postcss/autoprefixer#visual-cascade).\n\n#### options.diff\nType: `Boolean|String`\nDefault value: `false`\n\nSet it to `true` if you want to get an output patch file:\n\n```js\noptions: {\n  diff: true // or 'custom/path/to/file.css.patch'\n}\n```\nAlso you can specify a path where to save this file. More examples in [Gruntfile](https://github.com/nDmitry/grunt-autoprefixer/blob/master/Gruntfile.js).\n\n#### options.map\nType: `Boolean|Object`\nDefault value: `false`\n\nIf the `map` option isn't defined or is set to `false`, Autoprefixer will neither create nor update a sourcemap.\n\nIf `true` is specified, Autoprefixer will try to find a sourcemap from a previous compilation step using an annotation comment (e.g. from Sass) and create a new sourcemap based on the found one (or just create a new sourcemap). The created sourcemap can be either a separate file or an inlined map depending on what the previous sourcemap was.\n\nYou can gain more control over sourcemap generation by setting an object to the `map` option:\n\n* `prev` (string or `false`): a path to a directory where a previous sourcemap is (e.g. `path/`). By default, Autoprefixer will try to find a previous sourcemap using a path from the annotation comment (or using the annotation comment itself if the map is inlined). You can also set this option to `false` to delete the previous sourcemap.\n* `inline` (boolean): whether a sourcemap will be inlined or not. By default, it will be the same as a previous sourcemap or a separate file.\n* `annotation` (boolean or string): set this option to `true` or `false` to enable or disable annotation comments. You can also overwrite an output sourcemap path using this option, e.g. `path/file.css.map` (by default, Autoprefixer will save your sourcemap to a directory where you save CSS). This option requires `inline` to be `false` or undefined.\n* `sourceContent` (boolean): whether original contents (e.g. Sass sources) will be included to a sourcemap. By default, Autoprefixer will add contents only if a previous sourcemap have them.\n\n#### options.silent\nType: `Boolean`\nDefault value: `false`\n\nIf the `silent` option is enabled, logging to the stdout will be suppressed.\n\n```js\noptions: {\n  silent: true\n}\n```\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n\n  autoprefixer: {\n\n    options: {\n      // Task-specific options go here.\n    },\n\n    // prefix the specified file\n    single_file: {\n      options: {\n        // Target-specific options go here.\n      },\n      src: 'src/css/file.css',\n      dest: 'dest/css/file.css'\n    },\n\n    // prefix all files\n    multiple_files: {\n      expand: true,\n      flatten: true,\n      src: 'src/css/*.css', // -> src/css/file1.css, src/css/file2.css\n      dest: 'dest/css/' // -> dest/css/file1.css, dest/css/file2.css\n    },\n\n    // if you have specified only the `src` param, the destination will be set automatically,\n    // so source files will be overwritten\n    no_dest: {\n      src: 'dest/css/file.css' // globbing is also possible here\n    },\n\n    diff: {\n        options: {\n            diff: true\n        },\n        src: 'src/css/file.css',\n        dest: 'dest/css/file.css' // -> dest/css/file.css, dest/css/file.css.patch\n    },\n\n    sourcemap: {\n        options: {\n            map: true\n        },\n        src: 'src/css/file.css',\n        dest: 'dest/css/file.css' // -> dest/css/file.css, dest/css/file.css.map\n    },\n  }\n\n});\n```\n\nCheck out project's [Gruntfile.js](https://github.com/nDmitry/grunt-autoprefixer/blob/master/Gruntfile.js) for more examples.\n\n### Updating prefixes database\n\n```\n$ npm update caniuse-db\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nDmitry/grunt-autoprefixer/issues"
  },
  "_id": "grunt-autoprefixer@1.0.1",
  "dist": {
    "shasum": "2cd84bdf4e1cb095d24ae8109643ccf495763ebf"
  },
  "_from": "grunt-autoprefixer@~1.0.1",
  "_resolved": "https://registry.npmjs.org/grunt-autoprefixer/-/grunt-autoprefixer-1.0.1.tgz"
}
